
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=12919504943, interval=12919504943
/// DSP=80, BRAM=0
void 3mm(
  float v0,
  float v1[4096][4096],
  float v2[4096][4096],
  float v3[4096][4096],
  float v4[4096][4096],
  float v5[4096][4096],
  float v6[4096][4096],
  float v7[4096][4096]
) {	// L5, [0,12919504943)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6
  #pragma HLS interface bram port=v7

  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=1
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=8 dim=2
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=8 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v5 cyclic factor=8 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v6 cyclic factor=8 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  #pragma HLS array_partition variable=v7 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v7 cyclic factor=8 dim=2
  #pragma HLS resource variable=v7 core=ram_s2p_bram

  for (int v8 = 0; v8 < 2048; v8 += 1) {	// L6, [0,1048578), iterCycle=1, II=1
    for (int v9 = 0; v9 < 512; v9 += 1) {	// L7, [12918456363,12918456877), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v5[(v8 * 2)][(v9 * 8)] = v0;	// L8, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 1)] = v0;	// L9, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 2)] = v0;	// L10, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 3)] = v0;	// L11, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 4)] = v0;	// L12, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 5)] = v0;	// L13, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 6)] = v0;	// L14, [0,1)
      v5[(v8 * 2)][((v9 * 8) + 7)] = v0;	// L15, [0,1)
      v5[((v8 * 2) + 1)][(v9 * 8)] = v0;	// L16, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 1)] = v0;	// L17, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 2)] = v0;	// L18, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 3)] = v0;	// L19, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 4)] = v0;	// L20, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 5)] = v0;	// L21, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 6)] = v0;	// L22, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 8) + 7)] = v0;	// L23, [0,1)
    }
  }
  for (int v10 = 0; v10 < 4096; v10 += 1) {	// L26, [1048578,4296015887), iterCycle=12, II=1
    for (int v11 = 0; v11 < 2048; v11 += 1) {	// L27, [8623489054,8624537643), iterCycle=12, II=1
      for (int v12 = 0; v12 < 512; v12 += 1) {	// L28, [8623489054,8623489579), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v13 = v1[(v11 * 2)][v10];	// L29, [0,2)
        float v14 = v2[v10][(v12 * 8)];	// L30, [0,2)
        float v15 = v13 * v14;	// L31, [2,6)
        float v16 = v5[(v11 * 2)][(v12 * 8)];	// L32, [4,6)
        float v17 = v15 + v16;	// L33, [6,11)
        v5[(v11 * 2)][(v12 * 8)] = v17;	// L34, [11,12)
        float v18 = v2[v10][((v12 * 8) + 1)];	// L35, [0,2)
        float v19 = v13 * v18;	// L36, [2,6)
        float v20 = v5[(v11 * 2)][((v12 * 8) + 1)];	// L37, [4,6)
        float v21 = v19 + v20;	// L38, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 1)] = v21;	// L39, [11,12)
        float v22 = v2[v10][((v12 * 8) + 2)];	// L40, [0,2)
        float v23 = v13 * v22;	// L41, [2,6)
        float v24 = v5[(v11 * 2)][((v12 * 8) + 2)];	// L42, [4,6)
        float v25 = v23 + v24;	// L43, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 2)] = v25;	// L44, [11,12)
        float v26 = v2[v10][((v12 * 8) + 3)];	// L45, [0,2)
        float v27 = v13 * v26;	// L46, [2,6)
        float v28 = v5[(v11 * 2)][((v12 * 8) + 3)];	// L47, [4,6)
        float v29 = v27 + v28;	// L48, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 3)] = v29;	// L49, [11,12)
        float v30 = v2[v10][((v12 * 8) + 4)];	// L50, [0,2)
        float v31 = v13 * v30;	// L51, [2,6)
        float v32 = v5[(v11 * 2)][((v12 * 8) + 4)];	// L52, [4,6)
        float v33 = v31 + v32;	// L53, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 4)] = v33;	// L54, [11,12)
        float v34 = v2[v10][((v12 * 8) + 5)];	// L55, [0,2)
        float v35 = v13 * v34;	// L56, [2,6)
        float v36 = v5[(v11 * 2)][((v12 * 8) + 5)];	// L57, [4,6)
        float v37 = v35 + v36;	// L58, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 5)] = v37;	// L59, [11,12)
        float v38 = v2[v10][((v12 * 8) + 6)];	// L60, [0,2)
        float v39 = v13 * v38;	// L61, [2,6)
        float v40 = v5[(v11 * 2)][((v12 * 8) + 6)];	// L62, [4,6)
        float v41 = v39 + v40;	// L63, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 6)] = v41;	// L64, [11,12)
        float v42 = v2[v10][((v12 * 8) + 7)];	// L65, [0,2)
        float v43 = v13 * v42;	// L66, [2,6)
        float v44 = v5[(v11 * 2)][((v12 * 8) + 7)];	// L67, [4,6)
        float v45 = v43 + v44;	// L68, [6,11)
        v5[(v11 * 2)][((v12 * 8) + 7)] = v45;	// L69, [11,12)
        float v46 = v1[((v11 * 2) + 1)][v10];	// L70, [0,2)
        float v47 = v46 * v14;	// L71, [2,6)
        float v48 = v5[((v11 * 2) + 1)][(v12 * 8)];	// L72, [4,6)
        float v49 = v47 + v48;	// L73, [6,11)
        v5[((v11 * 2) + 1)][(v12 * 8)] = v49;	// L74, [11,12)
        float v50 = v46 * v18;	// L75, [2,6)
        float v51 = v5[((v11 * 2) + 1)][((v12 * 8) + 1)];	// L76, [4,6)
        float v52 = v50 + v51;	// L77, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 1)] = v52;	// L78, [11,12)
        float v53 = v46 * v22;	// L79, [2,6)
        float v54 = v5[((v11 * 2) + 1)][((v12 * 8) + 2)];	// L80, [4,6)
        float v55 = v53 + v54;	// L81, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 2)] = v55;	// L82, [11,12)
        float v56 = v46 * v26;	// L83, [2,6)
        float v57 = v5[((v11 * 2) + 1)][((v12 * 8) + 3)];	// L84, [4,6)
        float v58 = v56 + v57;	// L85, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 3)] = v58;	// L86, [11,12)
        float v59 = v46 * v30;	// L87, [2,6)
        float v60 = v5[((v11 * 2) + 1)][((v12 * 8) + 4)];	// L88, [4,6)
        float v61 = v59 + v60;	// L89, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 4)] = v61;	// L90, [11,12)
        float v62 = v46 * v34;	// L91, [2,6)
        float v63 = v5[((v11 * 2) + 1)][((v12 * 8) + 5)];	// L92, [4,6)
        float v64 = v62 + v63;	// L93, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 5)] = v64;	// L94, [11,12)
        float v65 = v46 * v38;	// L95, [2,6)
        float v66 = v5[((v11 * 2) + 1)][((v12 * 8) + 6)];	// L96, [4,6)
        float v67 = v65 + v66;	// L97, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 6)] = v67;	// L98, [11,12)
        float v68 = v46 * v42;	// L99, [2,6)
        float v69 = v5[((v11 * 2) + 1)][((v12 * 8) + 7)];	// L100, [4,6)
        float v70 = v68 + v69;	// L101, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 8) + 7)] = v70;	// L102, [11,12)
      }
    }
  }
  for (int v71 = 0; v71 < 4096; v71 += 1) {	// L106, [4296015887,4312793105), iterCycle=1, II=1
    for (int v72 = 0; v72 < 4096; v72 += 1) {	// L107, [8606711836,8606715934), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v6[v71][v72] = v0;	// L108, [0,1)
    }
  }
  for (int v73 = 0; v73 < 4096; v73 += 1) {	// L111, [4312793105,8607760414), iterCycle=12, II=1
    for (int v74 = 0; v74 < 2048; v74 += 1) {	// L112, [4311744527,4312793116), iterCycle=12, II=1
      for (int v75 = 0; v75 < 512; v75 += 1) {	// L113, [4311744527,4311745052), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v76 = v3[(v74 * 2)][v73];	// L114, [0,2)
        float v77 = v4[v73][(v75 * 8)];	// L115, [0,2)
        float v78 = v76 * v77;	// L116, [2,6)
        float v79 = v6[(v74 * 2)][(v75 * 8)];	// L117, [4,6)
        float v80 = v78 + v79;	// L118, [6,11)
        v6[(v74 * 2)][(v75 * 8)] = v80;	// L119, [11,12)
        float v81 = v4[v73][((v75 * 8) + 1)];	// L120, [0,2)
        float v82 = v76 * v81;	// L121, [2,6)
        float v83 = v6[(v74 * 2)][((v75 * 8) + 1)];	// L122, [4,6)
        float v84 = v82 + v83;	// L123, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 1)] = v84;	// L124, [11,12)
        float v85 = v4[v73][((v75 * 8) + 2)];	// L125, [0,2)
        float v86 = v76 * v85;	// L126, [2,6)
        float v87 = v6[(v74 * 2)][((v75 * 8) + 2)];	// L127, [4,6)
        float v88 = v86 + v87;	// L128, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 2)] = v88;	// L129, [11,12)
        float v89 = v4[v73][((v75 * 8) + 3)];	// L130, [0,2)
        float v90 = v76 * v89;	// L131, [2,6)
        float v91 = v6[(v74 * 2)][((v75 * 8) + 3)];	// L132, [4,6)
        float v92 = v90 + v91;	// L133, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 3)] = v92;	// L134, [11,12)
        float v93 = v4[v73][((v75 * 8) + 4)];	// L135, [0,2)
        float v94 = v76 * v93;	// L136, [2,6)
        float v95 = v6[(v74 * 2)][((v75 * 8) + 4)];	// L137, [4,6)
        float v96 = v94 + v95;	// L138, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 4)] = v96;	// L139, [11,12)
        float v97 = v4[v73][((v75 * 8) + 5)];	// L140, [0,2)
        float v98 = v76 * v97;	// L141, [2,6)
        float v99 = v6[(v74 * 2)][((v75 * 8) + 5)];	// L142, [4,6)
        float v100 = v98 + v99;	// L143, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 5)] = v100;	// L144, [11,12)
        float v101 = v4[v73][((v75 * 8) + 6)];	// L145, [0,2)
        float v102 = v76 * v101;	// L146, [2,6)
        float v103 = v6[(v74 * 2)][((v75 * 8) + 6)];	// L147, [4,6)
        float v104 = v102 + v103;	// L148, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 6)] = v104;	// L149, [11,12)
        float v105 = v4[v73][((v75 * 8) + 7)];	// L150, [0,2)
        float v106 = v76 * v105;	// L151, [2,6)
        float v107 = v6[(v74 * 2)][((v75 * 8) + 7)];	// L152, [4,6)
        float v108 = v106 + v107;	// L153, [6,11)
        v6[(v74 * 2)][((v75 * 8) + 7)] = v108;	// L154, [11,12)
        float v109 = v3[((v74 * 2) + 1)][v73];	// L155, [0,2)
        float v110 = v109 * v77;	// L156, [2,6)
        float v111 = v6[((v74 * 2) + 1)][(v75 * 8)];	// L157, [4,6)
        float v112 = v110 + v111;	// L158, [6,11)
        v6[((v74 * 2) + 1)][(v75 * 8)] = v112;	// L159, [11,12)
        float v113 = v109 * v81;	// L160, [2,6)
        float v114 = v6[((v74 * 2) + 1)][((v75 * 8) + 1)];	// L161, [4,6)
        float v115 = v113 + v114;	// L162, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 1)] = v115;	// L163, [11,12)
        float v116 = v109 * v85;	// L164, [2,6)
        float v117 = v6[((v74 * 2) + 1)][((v75 * 8) + 2)];	// L165, [4,6)
        float v118 = v116 + v117;	// L166, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 2)] = v118;	// L167, [11,12)
        float v119 = v109 * v89;	// L168, [2,6)
        float v120 = v6[((v74 * 2) + 1)][((v75 * 8) + 3)];	// L169, [4,6)
        float v121 = v119 + v120;	// L170, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 3)] = v121;	// L171, [11,12)
        float v122 = v109 * v93;	// L172, [2,6)
        float v123 = v6[((v74 * 2) + 1)][((v75 * 8) + 4)];	// L173, [4,6)
        float v124 = v122 + v123;	// L174, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 4)] = v124;	// L175, [11,12)
        float v125 = v109 * v97;	// L176, [2,6)
        float v126 = v6[((v74 * 2) + 1)][((v75 * 8) + 5)];	// L177, [4,6)
        float v127 = v125 + v126;	// L178, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 5)] = v127;	// L179, [11,12)
        float v128 = v109 * v101;	// L180, [2,6)
        float v129 = v6[((v74 * 2) + 1)][((v75 * 8) + 6)];	// L181, [4,6)
        float v130 = v128 + v129;	// L182, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 6)] = v130;	// L183, [11,12)
        float v131 = v109 * v105;	// L184, [2,6)
        float v132 = v6[((v74 * 2) + 1)][((v75 * 8) + 7)];	// L185, [4,6)
        float v133 = v131 + v132;	// L186, [6,11)
        v6[((v74 * 2) + 1)][((v75 * 8) + 7)] = v133;	// L187, [11,12)
      }
    }
  }
  for (int v134 = 0; v134 < 4096; v134 += 1) {	// L191, [8607760414,8624537632), iterCycle=1, II=1
    for (int v135 = 0; v135 < 4096; v135 += 1) {	// L192, [4294967309,4294971407), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v7[v134][v135] = v0;	// L193, [0,1)
    }
  }
  for (int v136 = 0; v136 < 4096; v136 += 1) {	// L196, [8624537632,12919504941), iterCycle=12, II=1
    for (int v137 = 0; v137 < 2048; v137 += 1) {	// L197, [0,1048589), iterCycle=12, II=1
      for (int v138 = 0; v138 < 512; v138 += 1) {	// L198, [0,525), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v139 = v5[(v137 * 2)][v136];	// L199, [0,2)
        float v140 = v6[v136][(v138 * 8)];	// L200, [0,2)
        float v141 = v139 * v140;	// L201, [2,6)
        float v142 = v7[(v137 * 2)][(v138 * 8)];	// L202, [4,6)
        float v143 = v141 + v142;	// L203, [6,11)
        v7[(v137 * 2)][(v138 * 8)] = v143;	// L204, [11,12)
        float v144 = v6[v136][((v138 * 8) + 1)];	// L205, [0,2)
        float v145 = v139 * v144;	// L206, [2,6)
        float v146 = v7[(v137 * 2)][((v138 * 8) + 1)];	// L207, [4,6)
        float v147 = v145 + v146;	// L208, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 1)] = v147;	// L209, [11,12)
        float v148 = v6[v136][((v138 * 8) + 2)];	// L210, [0,2)
        float v149 = v139 * v148;	// L211, [2,6)
        float v150 = v7[(v137 * 2)][((v138 * 8) + 2)];	// L212, [4,6)
        float v151 = v149 + v150;	// L213, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 2)] = v151;	// L214, [11,12)
        float v152 = v6[v136][((v138 * 8) + 3)];	// L215, [0,2)
        float v153 = v139 * v152;	// L216, [2,6)
        float v154 = v7[(v137 * 2)][((v138 * 8) + 3)];	// L217, [4,6)
        float v155 = v153 + v154;	// L218, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 3)] = v155;	// L219, [11,12)
        float v156 = v6[v136][((v138 * 8) + 4)];	// L220, [0,2)
        float v157 = v139 * v156;	// L221, [2,6)
        float v158 = v7[(v137 * 2)][((v138 * 8) + 4)];	// L222, [4,6)
        float v159 = v157 + v158;	// L223, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 4)] = v159;	// L224, [11,12)
        float v160 = v6[v136][((v138 * 8) + 5)];	// L225, [0,2)
        float v161 = v139 * v160;	// L226, [2,6)
        float v162 = v7[(v137 * 2)][((v138 * 8) + 5)];	// L227, [4,6)
        float v163 = v161 + v162;	// L228, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 5)] = v163;	// L229, [11,12)
        float v164 = v6[v136][((v138 * 8) + 6)];	// L230, [0,2)
        float v165 = v139 * v164;	// L231, [2,6)
        float v166 = v7[(v137 * 2)][((v138 * 8) + 6)];	// L232, [4,6)
        float v167 = v165 + v166;	// L233, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 6)] = v167;	// L234, [11,12)
        float v168 = v6[v136][((v138 * 8) + 7)];	// L235, [0,2)
        float v169 = v139 * v168;	// L236, [2,6)
        float v170 = v7[(v137 * 2)][((v138 * 8) + 7)];	// L237, [4,6)
        float v171 = v169 + v170;	// L238, [6,11)
        v7[(v137 * 2)][((v138 * 8) + 7)] = v171;	// L239, [11,12)
        float v172 = v5[((v137 * 2) + 1)][v136];	// L240, [0,2)
        float v173 = v172 * v140;	// L241, [2,6)
        float v174 = v7[((v137 * 2) + 1)][(v138 * 8)];	// L242, [4,6)
        float v175 = v173 + v174;	// L243, [6,11)
        v7[((v137 * 2) + 1)][(v138 * 8)] = v175;	// L244, [11,12)
        float v176 = v172 * v144;	// L245, [2,6)
        float v177 = v7[((v137 * 2) + 1)][((v138 * 8) + 1)];	// L246, [4,6)
        float v178 = v176 + v177;	// L247, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 1)] = v178;	// L248, [11,12)
        float v179 = v172 * v148;	// L249, [2,6)
        float v180 = v7[((v137 * 2) + 1)][((v138 * 8) + 2)];	// L250, [4,6)
        float v181 = v179 + v180;	// L251, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 2)] = v181;	// L252, [11,12)
        float v182 = v172 * v152;	// L253, [2,6)
        float v183 = v7[((v137 * 2) + 1)][((v138 * 8) + 3)];	// L254, [4,6)
        float v184 = v182 + v183;	// L255, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 3)] = v184;	// L256, [11,12)
        float v185 = v172 * v156;	// L257, [2,6)
        float v186 = v7[((v137 * 2) + 1)][((v138 * 8) + 4)];	// L258, [4,6)
        float v187 = v185 + v186;	// L259, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 4)] = v187;	// L260, [11,12)
        float v188 = v172 * v160;	// L261, [2,6)
        float v189 = v7[((v137 * 2) + 1)][((v138 * 8) + 5)];	// L262, [4,6)
        float v190 = v188 + v189;	// L263, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 5)] = v190;	// L264, [11,12)
        float v191 = v172 * v164;	// L265, [2,6)
        float v192 = v7[((v137 * 2) + 1)][((v138 * 8) + 6)];	// L266, [4,6)
        float v193 = v191 + v192;	// L267, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 6)] = v193;	// L268, [11,12)
        float v194 = v172 * v168;	// L269, [2,6)
        float v195 = v7[((v137 * 2) + 1)][((v138 * 8) + 7)];	// L270, [4,6)
        float v196 = v194 + v195;	// L271, [6,11)
        v7[((v137 * 2) + 1)][((v138 * 8) + 7)] = v196;	// L272, [11,12)
      }
    }
  }
}

