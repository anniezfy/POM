
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=2148007963, interval=2148007963
/// DSP=166, BRAM=0
void gemm(
  float v0,
  float v1,
  float v2[4096][4096],
  float v3[4096][4096],
  float v4[4096][4096],
  float v5[4096][4096]
) {	// L5, [0,2148007963)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface s_axilite port=v1 bundle=ctrl
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5

  #pragma HLS array_partition variable=v2 cyclic factor=2 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=16 dim=2
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS resource variable=v5 core=ram_s2p_bram

  for (int v6 = 0; v6 < 2048; v6 += 1) {	// L6, [0,524296), iterCycle=7, II=1
    for (int v7 = 0; v7 < 256; v7 += 1) {	// L7, [2147483665,2147483929), iterCycle=7, II=1
      #pragma HLS pipeline II=1
      float v8 = v4[(v6 * 2)][(v7 * 16)];	// L8, [0,2)
      float v9 = v8 * v1;	// L9, [2,6)
      v4[(v6 * 2)][(v7 * 16)] = v9;	// L10, [6,7)
      float v10 = v4[(v6 * 2)][((v7 * 16) + 1)];	// L11, [0,2)
      float v11 = v10 * v1;	// L12, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 1)] = v11;	// L13, [6,7)
      float v12 = v4[(v6 * 2)][((v7 * 16) + 2)];	// L14, [0,2)
      float v13 = v12 * v1;	// L15, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 2)] = v13;	// L16, [6,7)
      float v14 = v4[(v6 * 2)][((v7 * 16) + 3)];	// L17, [0,2)
      float v15 = v14 * v1;	// L18, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 3)] = v15;	// L19, [6,7)
      float v16 = v4[(v6 * 2)][((v7 * 16) + 4)];	// L20, [0,2)
      float v17 = v16 * v1;	// L21, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 4)] = v17;	// L22, [6,7)
      float v18 = v4[(v6 * 2)][((v7 * 16) + 5)];	// L23, [0,2)
      float v19 = v18 * v1;	// L24, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 5)] = v19;	// L25, [6,7)
      float v20 = v4[(v6 * 2)][((v7 * 16) + 6)];	// L26, [0,2)
      float v21 = v20 * v1;	// L27, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 6)] = v21;	// L28, [6,7)
      float v22 = v4[(v6 * 2)][((v7 * 16) + 7)];	// L29, [0,2)
      float v23 = v22 * v1;	// L30, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 7)] = v23;	// L31, [6,7)
      float v24 = v4[(v6 * 2)][((v7 * 16) + 8)];	// L32, [0,2)
      float v25 = v24 * v1;	// L33, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 8)] = v25;	// L34, [6,7)
      float v26 = v4[(v6 * 2)][((v7 * 16) + 9)];	// L35, [0,2)
      float v27 = v26 * v1;	// L36, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 9)] = v27;	// L37, [6,7)
      float v28 = v4[(v6 * 2)][((v7 * 16) + 10)];	// L38, [0,2)
      float v29 = v28 * v1;	// L39, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 10)] = v29;	// L40, [6,7)
      float v30 = v4[(v6 * 2)][((v7 * 16) + 11)];	// L41, [0,2)
      float v31 = v30 * v1;	// L42, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 11)] = v31;	// L43, [6,7)
      float v32 = v4[(v6 * 2)][((v7 * 16) + 12)];	// L44, [0,2)
      float v33 = v32 * v1;	// L45, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 12)] = v33;	// L46, [6,7)
      float v34 = v4[(v6 * 2)][((v7 * 16) + 13)];	// L47, [0,2)
      float v35 = v34 * v1;	// L48, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 13)] = v35;	// L49, [6,7)
      float v36 = v4[(v6 * 2)][((v7 * 16) + 14)];	// L50, [0,2)
      float v37 = v36 * v1;	// L51, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 14)] = v37;	// L52, [6,7)
      float v38 = v4[(v6 * 2)][((v7 * 16) + 15)];	// L53, [0,2)
      float v39 = v38 * v1;	// L54, [2,6)
      v4[(v6 * 2)][((v7 * 16) + 15)] = v39;	// L55, [6,7)
      float v40 = v4[((v6 * 2) + 1)][(v7 * 16)];	// L56, [0,2)
      float v41 = v40 * v1;	// L57, [2,6)
      v4[((v6 * 2) + 1)][(v7 * 16)] = v41;	// L58, [6,7)
      float v42 = v4[((v6 * 2) + 1)][((v7 * 16) + 1)];	// L59, [0,2)
      float v43 = v42 * v1;	// L60, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 1)] = v43;	// L61, [6,7)
      float v44 = v4[((v6 * 2) + 1)][((v7 * 16) + 2)];	// L62, [0,2)
      float v45 = v44 * v1;	// L63, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 2)] = v45;	// L64, [6,7)
      float v46 = v4[((v6 * 2) + 1)][((v7 * 16) + 3)];	// L65, [0,2)
      float v47 = v46 * v1;	// L66, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 3)] = v47;	// L67, [6,7)
      float v48 = v4[((v6 * 2) + 1)][((v7 * 16) + 4)];	// L68, [0,2)
      float v49 = v48 * v1;	// L69, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 4)] = v49;	// L70, [6,7)
      float v50 = v4[((v6 * 2) + 1)][((v7 * 16) + 5)];	// L71, [0,2)
      float v51 = v50 * v1;	// L72, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 5)] = v51;	// L73, [6,7)
      float v52 = v4[((v6 * 2) + 1)][((v7 * 16) + 6)];	// L74, [0,2)
      float v53 = v52 * v1;	// L75, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 6)] = v53;	// L76, [6,7)
      float v54 = v4[((v6 * 2) + 1)][((v7 * 16) + 7)];	// L77, [0,2)
      float v55 = v54 * v1;	// L78, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 7)] = v55;	// L79, [6,7)
      float v56 = v4[((v6 * 2) + 1)][((v7 * 16) + 8)];	// L80, [0,2)
      float v57 = v56 * v1;	// L81, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 8)] = v57;	// L82, [6,7)
      float v58 = v4[((v6 * 2) + 1)][((v7 * 16) + 9)];	// L83, [0,2)
      float v59 = v58 * v1;	// L84, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 9)] = v59;	// L85, [6,7)
      float v60 = v4[((v6 * 2) + 1)][((v7 * 16) + 10)];	// L86, [0,2)
      float v61 = v60 * v1;	// L87, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 10)] = v61;	// L88, [6,7)
      float v62 = v4[((v6 * 2) + 1)][((v7 * 16) + 11)];	// L89, [0,2)
      float v63 = v62 * v1;	// L90, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 11)] = v63;	// L91, [6,7)
      float v64 = v4[((v6 * 2) + 1)][((v7 * 16) + 12)];	// L92, [0,2)
      float v65 = v64 * v1;	// L93, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 12)] = v65;	// L94, [6,7)
      float v66 = v4[((v6 * 2) + 1)][((v7 * 16) + 13)];	// L95, [0,2)
      float v67 = v66 * v1;	// L96, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 13)] = v67;	// L97, [6,7)
      float v68 = v4[((v6 * 2) + 1)][((v7 * 16) + 14)];	// L98, [0,2)
      float v69 = v68 * v1;	// L99, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 14)] = v69;	// L100, [6,7)
      float v70 = v4[((v6 * 2) + 1)][((v7 * 16) + 15)];	// L101, [0,2)
      float v71 = v70 * v1;	// L102, [2,6)
      v4[((v6 * 2) + 1)][((v7 * 16) + 15)] = v71;	// L103, [6,7)
    }
  }
  for (int v72 = 0; v72 < 4096; v72 += 1) {	// L106, [524296,2148007961), iterCycle=16, II=1
    for (int v73 = 0; v73 < 2048; v73 += 1) {	// L107, [0,524305), iterCycle=16, II=1
      for (int v74 = 0; v74 < 256; v74 += 1) {	// L108, [0,273), iterCycle=16, II=1
        #pragma HLS pipeline II=1
        float v75 = v2[(v73 * 2)][v72];	// L109, [0,2)
        float v76 = v0 * v75;	// L110, [2,6)
        float v77 = v3[v72][(v74 * 16)];	// L111, [4,6)
        float v78 = v77 * v76;	// L112, [6,10)
        float v79 = v4[(v73 * 2)][(v74 * 16)];	// L113, [8,10)
        float v80 = v78 + v79;	// L114, [10,15)
        v4[(v73 * 2)][(v74 * 16)] = v80;	// L115, [15,16)
        float v81 = v3[v72][((v74 * 16) + 1)];	// L116, [4,6)
        float v82 = v81 * v76;	// L117, [6,10)
        float v83 = v4[(v73 * 2)][((v74 * 16) + 1)];	// L118, [8,10)
        float v84 = v82 + v83;	// L119, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 1)] = v84;	// L120, [15,16)
        float v85 = v3[v72][((v74 * 16) + 2)];	// L121, [4,6)
        float v86 = v85 * v76;	// L122, [6,10)
        float v87 = v4[(v73 * 2)][((v74 * 16) + 2)];	// L123, [8,10)
        float v88 = v86 + v87;	// L124, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 2)] = v88;	// L125, [15,16)
        float v89 = v3[v72][((v74 * 16) + 3)];	// L126, [4,6)
        float v90 = v89 * v76;	// L127, [6,10)
        float v91 = v4[(v73 * 2)][((v74 * 16) + 3)];	// L128, [8,10)
        float v92 = v90 + v91;	// L129, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 3)] = v92;	// L130, [15,16)
        float v93 = v3[v72][((v74 * 16) + 4)];	// L131, [4,6)
        float v94 = v93 * v76;	// L132, [6,10)
        float v95 = v4[(v73 * 2)][((v74 * 16) + 4)];	// L133, [8,10)
        float v96 = v94 + v95;	// L134, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 4)] = v96;	// L135, [15,16)
        float v97 = v3[v72][((v74 * 16) + 5)];	// L136, [4,6)
        float v98 = v97 * v76;	// L137, [6,10)
        float v99 = v4[(v73 * 2)][((v74 * 16) + 5)];	// L138, [8,10)
        float v100 = v98 + v99;	// L139, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 5)] = v100;	// L140, [15,16)
        float v101 = v3[v72][((v74 * 16) + 6)];	// L141, [4,6)
        float v102 = v101 * v76;	// L142, [6,10)
        float v103 = v4[(v73 * 2)][((v74 * 16) + 6)];	// L143, [8,10)
        float v104 = v102 + v103;	// L144, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 6)] = v104;	// L145, [15,16)
        float v105 = v3[v72][((v74 * 16) + 7)];	// L146, [4,6)
        float v106 = v105 * v76;	// L147, [6,10)
        float v107 = v4[(v73 * 2)][((v74 * 16) + 7)];	// L148, [8,10)
        float v108 = v106 + v107;	// L149, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 7)] = v108;	// L150, [15,16)
        float v109 = v3[v72][((v74 * 16) + 8)];	// L151, [4,6)
        float v110 = v109 * v76;	// L152, [6,10)
        float v111 = v4[(v73 * 2)][((v74 * 16) + 8)];	// L153, [8,10)
        float v112 = v110 + v111;	// L154, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 8)] = v112;	// L155, [15,16)
        float v113 = v3[v72][((v74 * 16) + 9)];	// L156, [4,6)
        float v114 = v113 * v76;	// L157, [6,10)
        float v115 = v4[(v73 * 2)][((v74 * 16) + 9)];	// L158, [8,10)
        float v116 = v114 + v115;	// L159, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 9)] = v116;	// L160, [15,16)
        float v117 = v3[v72][((v74 * 16) + 10)];	// L161, [4,6)
        float v118 = v117 * v76;	// L162, [6,10)
        float v119 = v4[(v73 * 2)][((v74 * 16) + 10)];	// L163, [8,10)
        float v120 = v118 + v119;	// L164, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 10)] = v120;	// L165, [15,16)
        float v121 = v3[v72][((v74 * 16) + 11)];	// L166, [4,6)
        float v122 = v121 * v76;	// L167, [6,10)
        float v123 = v4[(v73 * 2)][((v74 * 16) + 11)];	// L168, [8,10)
        float v124 = v122 + v123;	// L169, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 11)] = v124;	// L170, [15,16)
        float v125 = v3[v72][((v74 * 16) + 12)];	// L171, [4,6)
        float v126 = v125 * v76;	// L172, [6,10)
        float v127 = v4[(v73 * 2)][((v74 * 16) + 12)];	// L173, [8,10)
        float v128 = v126 + v127;	// L174, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 12)] = v128;	// L175, [15,16)
        float v129 = v3[v72][((v74 * 16) + 13)];	// L176, [4,6)
        float v130 = v129 * v76;	// L177, [6,10)
        float v131 = v4[(v73 * 2)][((v74 * 16) + 13)];	// L178, [8,10)
        float v132 = v130 + v131;	// L179, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 13)] = v132;	// L180, [15,16)
        float v133 = v3[v72][((v74 * 16) + 14)];	// L181, [4,6)
        float v134 = v133 * v76;	// L182, [6,10)
        float v135 = v4[(v73 * 2)][((v74 * 16) + 14)];	// L183, [8,10)
        float v136 = v134 + v135;	// L184, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 14)] = v136;	// L185, [15,16)
        float v137 = v3[v72][((v74 * 16) + 15)];	// L186, [4,6)
        float v138 = v137 * v76;	// L187, [6,10)
        float v139 = v4[(v73 * 2)][((v74 * 16) + 15)];	// L188, [8,10)
        float v140 = v138 + v139;	// L189, [10,15)
        v4[(v73 * 2)][((v74 * 16) + 15)] = v140;	// L190, [15,16)
        float v141 = v2[((v73 * 2) + 1)][v72];	// L191, [0,2)
        float v142 = v0 * v141;	// L192, [2,6)
        float v143 = v77 * v142;	// L193, [6,10)
        float v144 = v4[((v73 * 2) + 1)][(v74 * 16)];	// L194, [8,10)
        float v145 = v143 + v144;	// L195, [10,15)
        v4[((v73 * 2) + 1)][(v74 * 16)] = v145;	// L196, [15,16)
        float v146 = v81 * v142;	// L197, [6,10)
        float v147 = v4[((v73 * 2) + 1)][((v74 * 16) + 1)];	// L198, [8,10)
        float v148 = v146 + v147;	// L199, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 1)] = v148;	// L200, [15,16)
        float v149 = v85 * v142;	// L201, [6,10)
        float v150 = v4[((v73 * 2) + 1)][((v74 * 16) + 2)];	// L202, [8,10)
        float v151 = v149 + v150;	// L203, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 2)] = v151;	// L204, [15,16)
        float v152 = v89 * v142;	// L205, [6,10)
        float v153 = v4[((v73 * 2) + 1)][((v74 * 16) + 3)];	// L206, [8,10)
        float v154 = v152 + v153;	// L207, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 3)] = v154;	// L208, [15,16)
        float v155 = v93 * v142;	// L209, [6,10)
        float v156 = v4[((v73 * 2) + 1)][((v74 * 16) + 4)];	// L210, [8,10)
        float v157 = v155 + v156;	// L211, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 4)] = v157;	// L212, [15,16)
        float v158 = v97 * v142;	// L213, [6,10)
        float v159 = v4[((v73 * 2) + 1)][((v74 * 16) + 5)];	// L214, [8,10)
        float v160 = v158 + v159;	// L215, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 5)] = v160;	// L216, [15,16)
        float v161 = v101 * v142;	// L217, [6,10)
        float v162 = v4[((v73 * 2) + 1)][((v74 * 16) + 6)];	// L218, [8,10)
        float v163 = v161 + v162;	// L219, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 6)] = v163;	// L220, [15,16)
        float v164 = v105 * v142;	// L221, [6,10)
        float v165 = v4[((v73 * 2) + 1)][((v74 * 16) + 7)];	// L222, [8,10)
        float v166 = v164 + v165;	// L223, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 7)] = v166;	// L224, [15,16)
        float v167 = v109 * v142;	// L225, [6,10)
        float v168 = v4[((v73 * 2) + 1)][((v74 * 16) + 8)];	// L226, [8,10)
        float v169 = v167 + v168;	// L227, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 8)] = v169;	// L228, [15,16)
        float v170 = v113 * v142;	// L229, [6,10)
        float v171 = v4[((v73 * 2) + 1)][((v74 * 16) + 9)];	// L230, [8,10)
        float v172 = v170 + v171;	// L231, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 9)] = v172;	// L232, [15,16)
        float v173 = v117 * v142;	// L233, [6,10)
        float v174 = v4[((v73 * 2) + 1)][((v74 * 16) + 10)];	// L234, [8,10)
        float v175 = v173 + v174;	// L235, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 10)] = v175;	// L236, [15,16)
        float v176 = v121 * v142;	// L237, [6,10)
        float v177 = v4[((v73 * 2) + 1)][((v74 * 16) + 11)];	// L238, [8,10)
        float v178 = v176 + v177;	// L239, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 11)] = v178;	// L240, [15,16)
        float v179 = v125 * v142;	// L241, [6,10)
        float v180 = v4[((v73 * 2) + 1)][((v74 * 16) + 12)];	// L242, [8,10)
        float v181 = v179 + v180;	// L243, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 12)] = v181;	// L244, [15,16)
        float v182 = v129 * v142;	// L245, [6,10)
        float v183 = v4[((v73 * 2) + 1)][((v74 * 16) + 13)];	// L246, [8,10)
        float v184 = v182 + v183;	// L247, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 13)] = v184;	// L248, [15,16)
        float v185 = v133 * v142;	// L249, [6,10)
        float v186 = v4[((v73 * 2) + 1)][((v74 * 16) + 14)];	// L250, [8,10)
        float v187 = v185 + v186;	// L251, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 14)] = v187;	// L252, [15,16)
        float v188 = v137 * v142;	// L253, [6,10)
        float v189 = v4[((v73 * 2) + 1)][((v74 * 16) + 15)];	// L254, [8,10)
        float v190 = v188 + v189;	// L255, [10,15)
        v4[((v73 * 2) + 1)][((v74 * 16) + 15)] = v190;	// L256, [15,16)
      }
    }
  }
}

