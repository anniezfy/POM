
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=1056800, interval=1056800
/// DSP=160, BRAM=0
void atax(
  float v0,
  float v1[4096][4096],
  float v2[4096],
  float v3[4096],
  float v4[4096]
) {	// L5, [0,1056800)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4

  #pragma HLS array_partition variable=v1 cyclic factor=32 dim=1
  #pragma HLS array_partition variable=v1 cyclic factor=32 dim=2
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=32 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=32 dim=1
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  for (int v5 = 0; v5 < 4096; v5 += 1) {	// L6, [0,4098), iterCycle=1, II=1
    #pragma HLS pipeline II=1
    v4[v5] = v0;	// L7, [0,1)
  }
  for (int v6 = 0; v6 < 4096; v6 += 1) {	// L9, [4098,8196), iterCycle=1, II=1
    v2[v6] = v0;	// L10, [0,1)
  }
  for (int v7 = 0; v7 < 4096; v7 += 1) {	// L12, [8196,532497), iterCycle=12, II=1
    for (int v8 = 0; v8 < 128; v8 += 1) {	// L13, [524301,524442), iterCycle=12, II=1
      #pragma HLS pipeline II=1
      float v9 = v1[(v8 * 32)][v7];	// L14, [0,2)
      float v10 = v3[v7];	// L15, [0,2)
      float v11 = v9 * v10;	// L16, [2,6)
      float v12 = v2[(v8 * 32)];	// L17, [4,6)
      float v13 = v11 + v12;	// L18, [6,11)
      v2[(v8 * 32)] = v13;	// L19, [11,12)
      float v14 = v1[((v8 * 32) + 1)][v7];	// L20, [0,2)
      float v15 = v14 * v10;	// L21, [2,6)
      float v16 = v2[((v8 * 32) + 1)];	// L22, [4,6)
      float v17 = v15 + v16;	// L23, [6,11)
      v2[((v8 * 32) + 1)] = v17;	// L24, [11,12)
      float v18 = v1[((v8 * 32) + 2)][v7];	// L25, [0,2)
      float v19 = v18 * v10;	// L26, [2,6)
      float v20 = v2[((v8 * 32) + 2)];	// L27, [4,6)
      float v21 = v19 + v20;	// L28, [6,11)
      v2[((v8 * 32) + 2)] = v21;	// L29, [11,12)
      float v22 = v1[((v8 * 32) + 3)][v7];	// L30, [0,2)
      float v23 = v22 * v10;	// L31, [2,6)
      float v24 = v2[((v8 * 32) + 3)];	// L32, [4,6)
      float v25 = v23 + v24;	// L33, [6,11)
      v2[((v8 * 32) + 3)] = v25;	// L34, [11,12)
      float v26 = v1[((v8 * 32) + 4)][v7];	// L35, [0,2)
      float v27 = v26 * v10;	// L36, [2,6)
      float v28 = v2[((v8 * 32) + 4)];	// L37, [4,6)
      float v29 = v27 + v28;	// L38, [6,11)
      v2[((v8 * 32) + 4)] = v29;	// L39, [11,12)
      float v30 = v1[((v8 * 32) + 5)][v7];	// L40, [0,2)
      float v31 = v30 * v10;	// L41, [2,6)
      float v32 = v2[((v8 * 32) + 5)];	// L42, [4,6)
      float v33 = v31 + v32;	// L43, [6,11)
      v2[((v8 * 32) + 5)] = v33;	// L44, [11,12)
      float v34 = v1[((v8 * 32) + 6)][v7];	// L45, [0,2)
      float v35 = v34 * v10;	// L46, [2,6)
      float v36 = v2[((v8 * 32) + 6)];	// L47, [4,6)
      float v37 = v35 + v36;	// L48, [6,11)
      v2[((v8 * 32) + 6)] = v37;	// L49, [11,12)
      float v38 = v1[((v8 * 32) + 7)][v7];	// L50, [0,2)
      float v39 = v38 * v10;	// L51, [2,6)
      float v40 = v2[((v8 * 32) + 7)];	// L52, [4,6)
      float v41 = v39 + v40;	// L53, [6,11)
      v2[((v8 * 32) + 7)] = v41;	// L54, [11,12)
      float v42 = v1[((v8 * 32) + 8)][v7];	// L55, [0,2)
      float v43 = v42 * v10;	// L56, [2,6)
      float v44 = v2[((v8 * 32) + 8)];	// L57, [4,6)
      float v45 = v43 + v44;	// L58, [6,11)
      v2[((v8 * 32) + 8)] = v45;	// L59, [11,12)
      float v46 = v1[((v8 * 32) + 9)][v7];	// L60, [0,2)
      float v47 = v46 * v10;	// L61, [2,6)
      float v48 = v2[((v8 * 32) + 9)];	// L62, [4,6)
      float v49 = v47 + v48;	// L63, [6,11)
      v2[((v8 * 32) + 9)] = v49;	// L64, [11,12)
      float v50 = v1[((v8 * 32) + 10)][v7];	// L65, [0,2)
      float v51 = v50 * v10;	// L66, [2,6)
      float v52 = v2[((v8 * 32) + 10)];	// L67, [4,6)
      float v53 = v51 + v52;	// L68, [6,11)
      v2[((v8 * 32) + 10)] = v53;	// L69, [11,12)
      float v54 = v1[((v8 * 32) + 11)][v7];	// L70, [0,2)
      float v55 = v54 * v10;	// L71, [2,6)
      float v56 = v2[((v8 * 32) + 11)];	// L72, [4,6)
      float v57 = v55 + v56;	// L73, [6,11)
      v2[((v8 * 32) + 11)] = v57;	// L74, [11,12)
      float v58 = v1[((v8 * 32) + 12)][v7];	// L75, [0,2)
      float v59 = v58 * v10;	// L76, [2,6)
      float v60 = v2[((v8 * 32) + 12)];	// L77, [4,6)
      float v61 = v59 + v60;	// L78, [6,11)
      v2[((v8 * 32) + 12)] = v61;	// L79, [11,12)
      float v62 = v1[((v8 * 32) + 13)][v7];	// L80, [0,2)
      float v63 = v62 * v10;	// L81, [2,6)
      float v64 = v2[((v8 * 32) + 13)];	// L82, [4,6)
      float v65 = v63 + v64;	// L83, [6,11)
      v2[((v8 * 32) + 13)] = v65;	// L84, [11,12)
      float v66 = v1[((v8 * 32) + 14)][v7];	// L85, [0,2)
      float v67 = v66 * v10;	// L86, [2,6)
      float v68 = v2[((v8 * 32) + 14)];	// L87, [4,6)
      float v69 = v67 + v68;	// L88, [6,11)
      v2[((v8 * 32) + 14)] = v69;	// L89, [11,12)
      float v70 = v1[((v8 * 32) + 15)][v7];	// L90, [0,2)
      float v71 = v70 * v10;	// L91, [2,6)
      float v72 = v2[((v8 * 32) + 15)];	// L92, [4,6)
      float v73 = v71 + v72;	// L93, [6,11)
      v2[((v8 * 32) + 15)] = v73;	// L94, [11,12)
      float v74 = v1[((v8 * 32) + 16)][v7];	// L95, [0,2)
      float v75 = v74 * v10;	// L96, [2,6)
      float v76 = v2[((v8 * 32) + 16)];	// L97, [4,6)
      float v77 = v75 + v76;	// L98, [6,11)
      v2[((v8 * 32) + 16)] = v77;	// L99, [11,12)
      float v78 = v1[((v8 * 32) + 17)][v7];	// L100, [0,2)
      float v79 = v78 * v10;	// L101, [2,6)
      float v80 = v2[((v8 * 32) + 17)];	// L102, [4,6)
      float v81 = v79 + v80;	// L103, [6,11)
      v2[((v8 * 32) + 17)] = v81;	// L104, [11,12)
      float v82 = v1[((v8 * 32) + 18)][v7];	// L105, [0,2)
      float v83 = v82 * v10;	// L106, [2,6)
      float v84 = v2[((v8 * 32) + 18)];	// L107, [4,6)
      float v85 = v83 + v84;	// L108, [6,11)
      v2[((v8 * 32) + 18)] = v85;	// L109, [11,12)
      float v86 = v1[((v8 * 32) + 19)][v7];	// L110, [0,2)
      float v87 = v86 * v10;	// L111, [2,6)
      float v88 = v2[((v8 * 32) + 19)];	// L112, [4,6)
      float v89 = v87 + v88;	// L113, [6,11)
      v2[((v8 * 32) + 19)] = v89;	// L114, [11,12)
      float v90 = v1[((v8 * 32) + 20)][v7];	// L115, [0,2)
      float v91 = v90 * v10;	// L116, [2,6)
      float v92 = v2[((v8 * 32) + 20)];	// L117, [4,6)
      float v93 = v91 + v92;	// L118, [6,11)
      v2[((v8 * 32) + 20)] = v93;	// L119, [11,12)
      float v94 = v1[((v8 * 32) + 21)][v7];	// L120, [0,2)
      float v95 = v94 * v10;	// L121, [2,6)
      float v96 = v2[((v8 * 32) + 21)];	// L122, [4,6)
      float v97 = v95 + v96;	// L123, [6,11)
      v2[((v8 * 32) + 21)] = v97;	// L124, [11,12)
      float v98 = v1[((v8 * 32) + 22)][v7];	// L125, [0,2)
      float v99 = v98 * v10;	// L126, [2,6)
      float v100 = v2[((v8 * 32) + 22)];	// L127, [4,6)
      float v101 = v99 + v100;	// L128, [6,11)
      v2[((v8 * 32) + 22)] = v101;	// L129, [11,12)
      float v102 = v1[((v8 * 32) + 23)][v7];	// L130, [0,2)
      float v103 = v102 * v10;	// L131, [2,6)
      float v104 = v2[((v8 * 32) + 23)];	// L132, [4,6)
      float v105 = v103 + v104;	// L133, [6,11)
      v2[((v8 * 32) + 23)] = v105;	// L134, [11,12)
      float v106 = v1[((v8 * 32) + 24)][v7];	// L135, [0,2)
      float v107 = v106 * v10;	// L136, [2,6)
      float v108 = v2[((v8 * 32) + 24)];	// L137, [4,6)
      float v109 = v107 + v108;	// L138, [6,11)
      v2[((v8 * 32) + 24)] = v109;	// L139, [11,12)
      float v110 = v1[((v8 * 32) + 25)][v7];	// L140, [0,2)
      float v111 = v110 * v10;	// L141, [2,6)
      float v112 = v2[((v8 * 32) + 25)];	// L142, [4,6)
      float v113 = v111 + v112;	// L143, [6,11)
      v2[((v8 * 32) + 25)] = v113;	// L144, [11,12)
      float v114 = v1[((v8 * 32) + 26)][v7];	// L145, [0,2)
      float v115 = v114 * v10;	// L146, [2,6)
      float v116 = v2[((v8 * 32) + 26)];	// L147, [4,6)
      float v117 = v115 + v116;	// L148, [6,11)
      v2[((v8 * 32) + 26)] = v117;	// L149, [11,12)
      float v118 = v1[((v8 * 32) + 27)][v7];	// L150, [0,2)
      float v119 = v118 * v10;	// L151, [2,6)
      float v120 = v2[((v8 * 32) + 27)];	// L152, [4,6)
      float v121 = v119 + v120;	// L153, [6,11)
      v2[((v8 * 32) + 27)] = v121;	// L154, [11,12)
      float v122 = v1[((v8 * 32) + 28)][v7];	// L155, [0,2)
      float v123 = v122 * v10;	// L156, [2,6)
      float v124 = v2[((v8 * 32) + 28)];	// L157, [4,6)
      float v125 = v123 + v124;	// L158, [6,11)
      v2[((v8 * 32) + 28)] = v125;	// L159, [11,12)
      float v126 = v1[((v8 * 32) + 29)][v7];	// L160, [0,2)
      float v127 = v126 * v10;	// L161, [2,6)
      float v128 = v2[((v8 * 32) + 29)];	// L162, [4,6)
      float v129 = v127 + v128;	// L163, [6,11)
      v2[((v8 * 32) + 29)] = v129;	// L164, [11,12)
      float v130 = v1[((v8 * 32) + 30)][v7];	// L165, [0,2)
      float v131 = v130 * v10;	// L166, [2,6)
      float v132 = v2[((v8 * 32) + 30)];	// L167, [4,6)
      float v133 = v131 + v132;	// L168, [6,11)
      v2[((v8 * 32) + 30)] = v133;	// L169, [11,12)
      float v134 = v1[((v8 * 32) + 31)][v7];	// L170, [0,2)
      float v135 = v134 * v10;	// L171, [2,6)
      float v136 = v2[((v8 * 32) + 31)];	// L172, [4,6)
      float v137 = v135 + v136;	// L173, [6,11)
      v2[((v8 * 32) + 31)] = v137;	// L174, [11,12)
    }
  }
  for (int v138 = 0; v138 < 4096; v138 += 1) {	// L177, [532497,1056798), iterCycle=12, II=1
    for (int v139 = 0; v139 < 128; v139 += 1) {	// L178, [0,141), iterCycle=12, II=1
      #pragma HLS pipeline II=1
      float v140 = v1[v138][(v139 * 32)];	// L179, [0,2)
      float v141 = v2[v138];	// L180, [0,2)
      float v142 = v140 * v141;	// L181, [2,6)
      float v143 = v4[(v139 * 32)];	// L182, [4,6)
      float v144 = v142 + v143;	// L183, [6,11)
      v4[(v139 * 32)] = v144;	// L184, [11,12)
      float v145 = v1[v138][((v139 * 32) + 1)];	// L185, [0,2)
      float v146 = v145 * v141;	// L186, [2,6)
      float v147 = v4[((v139 * 32) + 1)];	// L187, [4,6)
      float v148 = v146 + v147;	// L188, [6,11)
      v4[((v139 * 32) + 1)] = v148;	// L189, [11,12)
      float v149 = v1[v138][((v139 * 32) + 2)];	// L190, [0,2)
      float v150 = v149 * v141;	// L191, [2,6)
      float v151 = v4[((v139 * 32) + 2)];	// L192, [4,6)
      float v152 = v150 + v151;	// L193, [6,11)
      v4[((v139 * 32) + 2)] = v152;	// L194, [11,12)
      float v153 = v1[v138][((v139 * 32) + 3)];	// L195, [0,2)
      float v154 = v153 * v141;	// L196, [2,6)
      float v155 = v4[((v139 * 32) + 3)];	// L197, [4,6)
      float v156 = v154 + v155;	// L198, [6,11)
      v4[((v139 * 32) + 3)] = v156;	// L199, [11,12)
      float v157 = v1[v138][((v139 * 32) + 4)];	// L200, [0,2)
      float v158 = v157 * v141;	// L201, [2,6)
      float v159 = v4[((v139 * 32) + 4)];	// L202, [4,6)
      float v160 = v158 + v159;	// L203, [6,11)
      v4[((v139 * 32) + 4)] = v160;	// L204, [11,12)
      float v161 = v1[v138][((v139 * 32) + 5)];	// L205, [0,2)
      float v162 = v161 * v141;	// L206, [2,6)
      float v163 = v4[((v139 * 32) + 5)];	// L207, [4,6)
      float v164 = v162 + v163;	// L208, [6,11)
      v4[((v139 * 32) + 5)] = v164;	// L209, [11,12)
      float v165 = v1[v138][((v139 * 32) + 6)];	// L210, [0,2)
      float v166 = v165 * v141;	// L211, [2,6)
      float v167 = v4[((v139 * 32) + 6)];	// L212, [4,6)
      float v168 = v166 + v167;	// L213, [6,11)
      v4[((v139 * 32) + 6)] = v168;	// L214, [11,12)
      float v169 = v1[v138][((v139 * 32) + 7)];	// L215, [0,2)
      float v170 = v169 * v141;	// L216, [2,6)
      float v171 = v4[((v139 * 32) + 7)];	// L217, [4,6)
      float v172 = v170 + v171;	// L218, [6,11)
      v4[((v139 * 32) + 7)] = v172;	// L219, [11,12)
      float v173 = v1[v138][((v139 * 32) + 8)];	// L220, [0,2)
      float v174 = v173 * v141;	// L221, [2,6)
      float v175 = v4[((v139 * 32) + 8)];	// L222, [4,6)
      float v176 = v174 + v175;	// L223, [6,11)
      v4[((v139 * 32) + 8)] = v176;	// L224, [11,12)
      float v177 = v1[v138][((v139 * 32) + 9)];	// L225, [0,2)
      float v178 = v177 * v141;	// L226, [2,6)
      float v179 = v4[((v139 * 32) + 9)];	// L227, [4,6)
      float v180 = v178 + v179;	// L228, [6,11)
      v4[((v139 * 32) + 9)] = v180;	// L229, [11,12)
      float v181 = v1[v138][((v139 * 32) + 10)];	// L230, [0,2)
      float v182 = v181 * v141;	// L231, [2,6)
      float v183 = v4[((v139 * 32) + 10)];	// L232, [4,6)
      float v184 = v182 + v183;	// L233, [6,11)
      v4[((v139 * 32) + 10)] = v184;	// L234, [11,12)
      float v185 = v1[v138][((v139 * 32) + 11)];	// L235, [0,2)
      float v186 = v185 * v141;	// L236, [2,6)
      float v187 = v4[((v139 * 32) + 11)];	// L237, [4,6)
      float v188 = v186 + v187;	// L238, [6,11)
      v4[((v139 * 32) + 11)] = v188;	// L239, [11,12)
      float v189 = v1[v138][((v139 * 32) + 12)];	// L240, [0,2)
      float v190 = v189 * v141;	// L241, [2,6)
      float v191 = v4[((v139 * 32) + 12)];	// L242, [4,6)
      float v192 = v190 + v191;	// L243, [6,11)
      v4[((v139 * 32) + 12)] = v192;	// L244, [11,12)
      float v193 = v1[v138][((v139 * 32) + 13)];	// L245, [0,2)
      float v194 = v193 * v141;	// L246, [2,6)
      float v195 = v4[((v139 * 32) + 13)];	// L247, [4,6)
      float v196 = v194 + v195;	// L248, [6,11)
      v4[((v139 * 32) + 13)] = v196;	// L249, [11,12)
      float v197 = v1[v138][((v139 * 32) + 14)];	// L250, [0,2)
      float v198 = v197 * v141;	// L251, [2,6)
      float v199 = v4[((v139 * 32) + 14)];	// L252, [4,6)
      float v200 = v198 + v199;	// L253, [6,11)
      v4[((v139 * 32) + 14)] = v200;	// L254, [11,12)
      float v201 = v1[v138][((v139 * 32) + 15)];	// L255, [0,2)
      float v202 = v201 * v141;	// L256, [2,6)
      float v203 = v4[((v139 * 32) + 15)];	// L257, [4,6)
      float v204 = v202 + v203;	// L258, [6,11)
      v4[((v139 * 32) + 15)] = v204;	// L259, [11,12)
      float v205 = v1[v138][((v139 * 32) + 16)];	// L260, [0,2)
      float v206 = v205 * v141;	// L261, [2,6)
      float v207 = v4[((v139 * 32) + 16)];	// L262, [4,6)
      float v208 = v206 + v207;	// L263, [6,11)
      v4[((v139 * 32) + 16)] = v208;	// L264, [11,12)
      float v209 = v1[v138][((v139 * 32) + 17)];	// L265, [0,2)
      float v210 = v209 * v141;	// L266, [2,6)
      float v211 = v4[((v139 * 32) + 17)];	// L267, [4,6)
      float v212 = v210 + v211;	// L268, [6,11)
      v4[((v139 * 32) + 17)] = v212;	// L269, [11,12)
      float v213 = v1[v138][((v139 * 32) + 18)];	// L270, [0,2)
      float v214 = v213 * v141;	// L271, [2,6)
      float v215 = v4[((v139 * 32) + 18)];	// L272, [4,6)
      float v216 = v214 + v215;	// L273, [6,11)
      v4[((v139 * 32) + 18)] = v216;	// L274, [11,12)
      float v217 = v1[v138][((v139 * 32) + 19)];	// L275, [0,2)
      float v218 = v217 * v141;	// L276, [2,6)
      float v219 = v4[((v139 * 32) + 19)];	// L277, [4,6)
      float v220 = v218 + v219;	// L278, [6,11)
      v4[((v139 * 32) + 19)] = v220;	// L279, [11,12)
      float v221 = v1[v138][((v139 * 32) + 20)];	// L280, [0,2)
      float v222 = v221 * v141;	// L281, [2,6)
      float v223 = v4[((v139 * 32) + 20)];	// L282, [4,6)
      float v224 = v222 + v223;	// L283, [6,11)
      v4[((v139 * 32) + 20)] = v224;	// L284, [11,12)
      float v225 = v1[v138][((v139 * 32) + 21)];	// L285, [0,2)
      float v226 = v225 * v141;	// L286, [2,6)
      float v227 = v4[((v139 * 32) + 21)];	// L287, [4,6)
      float v228 = v226 + v227;	// L288, [6,11)
      v4[((v139 * 32) + 21)] = v228;	// L289, [11,12)
      float v229 = v1[v138][((v139 * 32) + 22)];	// L290, [0,2)
      float v230 = v229 * v141;	// L291, [2,6)
      float v231 = v4[((v139 * 32) + 22)];	// L292, [4,6)
      float v232 = v230 + v231;	// L293, [6,11)
      v4[((v139 * 32) + 22)] = v232;	// L294, [11,12)
      float v233 = v1[v138][((v139 * 32) + 23)];	// L295, [0,2)
      float v234 = v233 * v141;	// L296, [2,6)
      float v235 = v4[((v139 * 32) + 23)];	// L297, [4,6)
      float v236 = v234 + v235;	// L298, [6,11)
      v4[((v139 * 32) + 23)] = v236;	// L299, [11,12)
      float v237 = v1[v138][((v139 * 32) + 24)];	// L300, [0,2)
      float v238 = v237 * v141;	// L301, [2,6)
      float v239 = v4[((v139 * 32) + 24)];	// L302, [4,6)
      float v240 = v238 + v239;	// L303, [6,11)
      v4[((v139 * 32) + 24)] = v240;	// L304, [11,12)
      float v241 = v1[v138][((v139 * 32) + 25)];	// L305, [0,2)
      float v242 = v241 * v141;	// L306, [2,6)
      float v243 = v4[((v139 * 32) + 25)];	// L307, [4,6)
      float v244 = v242 + v243;	// L308, [6,11)
      v4[((v139 * 32) + 25)] = v244;	// L309, [11,12)
      float v245 = v1[v138][((v139 * 32) + 26)];	// L310, [0,2)
      float v246 = v245 * v141;	// L311, [2,6)
      float v247 = v4[((v139 * 32) + 26)];	// L312, [4,6)
      float v248 = v246 + v247;	// L313, [6,11)
      v4[((v139 * 32) + 26)] = v248;	// L314, [11,12)
      float v249 = v1[v138][((v139 * 32) + 27)];	// L315, [0,2)
      float v250 = v249 * v141;	// L316, [2,6)
      float v251 = v4[((v139 * 32) + 27)];	// L317, [4,6)
      float v252 = v250 + v251;	// L318, [6,11)
      v4[((v139 * 32) + 27)] = v252;	// L319, [11,12)
      float v253 = v1[v138][((v139 * 32) + 28)];	// L320, [0,2)
      float v254 = v253 * v141;	// L321, [2,6)
      float v255 = v4[((v139 * 32) + 28)];	// L322, [4,6)
      float v256 = v254 + v255;	// L323, [6,11)
      v4[((v139 * 32) + 28)] = v256;	// L324, [11,12)
      float v257 = v1[v138][((v139 * 32) + 29)];	// L325, [0,2)
      float v258 = v257 * v141;	// L326, [2,6)
      float v259 = v4[((v139 * 32) + 29)];	// L327, [4,6)
      float v260 = v258 + v259;	// L328, [6,11)
      v4[((v139 * 32) + 29)] = v260;	// L329, [11,12)
      float v261 = v1[v138][((v139 * 32) + 30)];	// L330, [0,2)
      float v262 = v261 * v141;	// L331, [2,6)
      float v263 = v4[((v139 * 32) + 30)];	// L332, [4,6)
      float v264 = v262 + v263;	// L333, [6,11)
      v4[((v139 * 32) + 30)] = v264;	// L334, [11,12)
      float v265 = v1[v138][((v139 * 32) + 31)];	// L335, [0,2)
      float v266 = v265 * v141;	// L336, [2,6)
      float v267 = v4[((v139 * 32) + 31)];	// L337, [4,6)
      float v268 = v266 + v267;	// L338, [6,11)
      v4[((v139 * 32) + 31)] = v268;	// L339, [11,12)
    }
  }
}

