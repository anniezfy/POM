
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=8607236145, interval=8607236145
/// DSP=83, BRAM=0
void 2mm(
  float v0,
  float v1,
  float v2,
  float v3[4096][4096],
  float v4[4096][4096],
  float v5[4096][4096],
  float v6[4096][4096],
  float v7[4096][4096]
) {	// L6, [0,8607236145)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface s_axilite port=v1 bundle=ctrl
  #pragma HLS interface s_axilite port=v2 bundle=ctrl
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6
  #pragma HLS interface bram port=v7

  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=2
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=8 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v6 cyclic factor=8 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  #pragma HLS array_partition variable=v7 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v7 cyclic factor=16 dim=2
  #pragma HLS resource variable=v7 core=ram_s2p_bram

  for (int v8 = 0; v8 < 2048; v8 += 1) {	// L7, [0,524290), iterCycle=1, II=1
    for (int v9 = 0; v9 < 256; v9 += 1) {	// L8, [8606711853,8606712111), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v7[(v8 * 2)][(v9 * 16)] = v2;	// L9, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 1)] = v2;	// L10, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 2)] = v2;	// L11, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 3)] = v2;	// L12, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 4)] = v2;	// L13, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 5)] = v2;	// L14, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 6)] = v2;	// L15, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 7)] = v2;	// L16, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 8)] = v2;	// L17, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 9)] = v2;	// L18, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 10)] = v2;	// L19, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 11)] = v2;	// L20, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 12)] = v2;	// L21, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 13)] = v2;	// L22, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 14)] = v2;	// L23, [0,1)
      v7[(v8 * 2)][((v9 * 16) + 15)] = v2;	// L24, [0,1)
      v7[((v8 * 2) + 1)][(v9 * 16)] = v2;	// L25, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 1)] = v2;	// L26, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 2)] = v2;	// L27, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 3)] = v2;	// L28, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 4)] = v2;	// L29, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 5)] = v2;	// L30, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 6)] = v2;	// L31, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 7)] = v2;	// L32, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 8)] = v2;	// L33, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 9)] = v2;	// L34, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 10)] = v2;	// L35, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 11)] = v2;	// L36, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 12)] = v2;	// L37, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 13)] = v2;	// L38, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 14)] = v2;	// L39, [0,1)
      v7[((v8 * 2) + 1)][((v9 * 16) + 15)] = v2;	// L40, [0,1)
    }
  }
  for (int v10 = 0; v10 < 2048; v10 += 1) {	// L43, [524290,4295491610), iterCycle=24, II=2
    for (int v11 = 0; v11 < 4096; v11 += 1) {	// L44, [4311744533,4313841709), iterCycle=24, II=2
      for (int v12 = 0; v12 < 256; v12 += 1) {	// L45, [4311744533,4311745069), iterCycle=24, II=2
        #pragma HLS pipeline II=1
        float v13 = v3[v11][(v10 * 2)];	// L46, [0,2)
        float v14 = v0 * v13;	// L47, [2,6)
        float v15 = v4[(v10 * 2)][(v12 * 16)];	// L48, [4,6)
        float v16 = v15 * v14;	// L49, [6,10)
        float v17 = v7[v11][(v12 * 16)];	// L50, [8,10)
        float v18 = v16 + v17;	// L51, [10,15)
        v7[v11][(v12 * 16)] = v18;	// L52, [15,16)
        float v19 = v4[(v10 * 2)][((v12 * 16) + 1)];	// L53, [4,6)
        float v20 = v19 * v14;	// L54, [6,10)
        float v21 = v7[v11][((v12 * 16) + 1)];	// L55, [8,10)
        float v22 = v20 + v21;	// L56, [10,15)
        v7[v11][((v12 * 16) + 1)] = v22;	// L57, [15,16)
        float v23 = v4[(v10 * 2)][((v12 * 16) + 2)];	// L58, [4,6)
        float v24 = v23 * v14;	// L59, [6,10)
        float v25 = v7[v11][((v12 * 16) + 2)];	// L60, [8,10)
        float v26 = v24 + v25;	// L61, [10,15)
        v7[v11][((v12 * 16) + 2)] = v26;	// L62, [15,16)
        float v27 = v4[(v10 * 2)][((v12 * 16) + 3)];	// L63, [4,6)
        float v28 = v27 * v14;	// L64, [6,10)
        float v29 = v7[v11][((v12 * 16) + 3)];	// L65, [8,10)
        float v30 = v28 + v29;	// L66, [10,15)
        v7[v11][((v12 * 16) + 3)] = v30;	// L67, [15,16)
        float v31 = v4[(v10 * 2)][((v12 * 16) + 4)];	// L68, [4,6)
        float v32 = v31 * v14;	// L69, [6,10)
        float v33 = v7[v11][((v12 * 16) + 4)];	// L70, [8,10)
        float v34 = v32 + v33;	// L71, [10,15)
        v7[v11][((v12 * 16) + 4)] = v34;	// L72, [15,16)
        float v35 = v4[(v10 * 2)][((v12 * 16) + 5)];	// L73, [4,6)
        float v36 = v35 * v14;	// L74, [6,10)
        float v37 = v7[v11][((v12 * 16) + 5)];	// L75, [8,10)
        float v38 = v36 + v37;	// L76, [10,15)
        v7[v11][((v12 * 16) + 5)] = v38;	// L77, [15,16)
        float v39 = v4[(v10 * 2)][((v12 * 16) + 6)];	// L78, [4,6)
        float v40 = v39 * v14;	// L79, [6,10)
        float v41 = v7[v11][((v12 * 16) + 6)];	// L80, [8,10)
        float v42 = v40 + v41;	// L81, [10,15)
        v7[v11][((v12 * 16) + 6)] = v42;	// L82, [15,16)
        float v43 = v4[(v10 * 2)][((v12 * 16) + 7)];	// L83, [4,6)
        float v44 = v43 * v14;	// L84, [6,10)
        float v45 = v7[v11][((v12 * 16) + 7)];	// L85, [8,10)
        float v46 = v44 + v45;	// L86, [10,15)
        v7[v11][((v12 * 16) + 7)] = v46;	// L87, [15,16)
        float v47 = v4[(v10 * 2)][((v12 * 16) + 8)];	// L88, [4,6)
        float v48 = v47 * v14;	// L89, [6,10)
        float v49 = v7[v11][((v12 * 16) + 8)];	// L90, [8,10)
        float v50 = v48 + v49;	// L91, [10,15)
        v7[v11][((v12 * 16) + 8)] = v50;	// L92, [15,16)
        float v51 = v4[(v10 * 2)][((v12 * 16) + 9)];	// L93, [4,6)
        float v52 = v51 * v14;	// L94, [6,10)
        float v53 = v7[v11][((v12 * 16) + 9)];	// L95, [8,10)
        float v54 = v52 + v53;	// L96, [10,15)
        v7[v11][((v12 * 16) + 9)] = v54;	// L97, [15,16)
        float v55 = v4[(v10 * 2)][((v12 * 16) + 10)];	// L98, [4,6)
        float v56 = v55 * v14;	// L99, [6,10)
        float v57 = v7[v11][((v12 * 16) + 10)];	// L100, [8,10)
        float v58 = v56 + v57;	// L101, [10,15)
        v7[v11][((v12 * 16) + 10)] = v58;	// L102, [15,16)
        float v59 = v4[(v10 * 2)][((v12 * 16) + 11)];	// L103, [4,6)
        float v60 = v59 * v14;	// L104, [6,10)
        float v61 = v7[v11][((v12 * 16) + 11)];	// L105, [8,10)
        float v62 = v60 + v61;	// L106, [10,15)
        v7[v11][((v12 * 16) + 11)] = v62;	// L107, [15,16)
        float v63 = v4[(v10 * 2)][((v12 * 16) + 12)];	// L108, [4,6)
        float v64 = v63 * v14;	// L109, [6,10)
        float v65 = v7[v11][((v12 * 16) + 12)];	// L110, [8,10)
        float v66 = v64 + v65;	// L111, [10,15)
        v7[v11][((v12 * 16) + 12)] = v66;	// L112, [15,16)
        float v67 = v4[(v10 * 2)][((v12 * 16) + 13)];	// L113, [4,6)
        float v68 = v67 * v14;	// L114, [6,10)
        float v69 = v7[v11][((v12 * 16) + 13)];	// L115, [8,10)
        float v70 = v68 + v69;	// L116, [10,15)
        v7[v11][((v12 * 16) + 13)] = v70;	// L117, [15,16)
        float v71 = v4[(v10 * 2)][((v12 * 16) + 14)];	// L118, [4,6)
        float v72 = v71 * v14;	// L119, [6,10)
        float v73 = v7[v11][((v12 * 16) + 14)];	// L120, [8,10)
        float v74 = v72 + v73;	// L121, [10,15)
        v7[v11][((v12 * 16) + 14)] = v74;	// L122, [15,16)
        float v75 = v4[(v10 * 2)][((v12 * 16) + 15)];	// L123, [4,6)
        float v76 = v75 * v14;	// L124, [6,10)
        float v77 = v7[v11][((v12 * 16) + 15)];	// L125, [8,10)
        float v78 = v76 + v77;	// L126, [10,15)
        v7[v11][((v12 * 16) + 15)] = v78;	// L127, [15,16)
        float v79 = v3[v11][((v10 * 2) + 1)];	// L128, [8,10)
        float v80 = v0 * v79;	// L129, [10,14)
        float v81 = v4[((v10 * 2) + 1)][(v12 * 16)];	// L130, [12,14)
        float v82 = v81 * v80;	// L131, [14,18)
        float v83 = v7[v11][(v12 * 16)];	// L132, [16,18)
        float v84 = v82 + v83;	// L133, [18,23)
        v7[v11][(v12 * 16)] = v84;	// L134, [23,24)
        float v85 = v4[((v10 * 2) + 1)][((v12 * 16) + 1)];	// L135, [12,14)
        float v86 = v85 * v80;	// L136, [14,18)
        float v87 = v7[v11][((v12 * 16) + 1)];	// L137, [16,18)
        float v88 = v86 + v87;	// L138, [18,23)
        v7[v11][((v12 * 16) + 1)] = v88;	// L139, [23,24)
        float v89 = v4[((v10 * 2) + 1)][((v12 * 16) + 2)];	// L140, [12,14)
        float v90 = v89 * v80;	// L141, [14,18)
        float v91 = v7[v11][((v12 * 16) + 2)];	// L142, [16,18)
        float v92 = v90 + v91;	// L143, [18,23)
        v7[v11][((v12 * 16) + 2)] = v92;	// L144, [23,24)
        float v93 = v4[((v10 * 2) + 1)][((v12 * 16) + 3)];	// L145, [12,14)
        float v94 = v93 * v80;	// L146, [14,18)
        float v95 = v7[v11][((v12 * 16) + 3)];	// L147, [16,18)
        float v96 = v94 + v95;	// L148, [18,23)
        v7[v11][((v12 * 16) + 3)] = v96;	// L149, [23,24)
        float v97 = v4[((v10 * 2) + 1)][((v12 * 16) + 4)];	// L150, [12,14)
        float v98 = v97 * v80;	// L151, [14,18)
        float v99 = v7[v11][((v12 * 16) + 4)];	// L152, [16,18)
        float v100 = v98 + v99;	// L153, [18,23)
        v7[v11][((v12 * 16) + 4)] = v100;	// L154, [23,24)
        float v101 = v4[((v10 * 2) + 1)][((v12 * 16) + 5)];	// L155, [12,14)
        float v102 = v101 * v80;	// L156, [14,18)
        float v103 = v7[v11][((v12 * 16) + 5)];	// L157, [16,18)
        float v104 = v102 + v103;	// L158, [18,23)
        v7[v11][((v12 * 16) + 5)] = v104;	// L159, [23,24)
        float v105 = v4[((v10 * 2) + 1)][((v12 * 16) + 6)];	// L160, [12,14)
        float v106 = v105 * v80;	// L161, [14,18)
        float v107 = v7[v11][((v12 * 16) + 6)];	// L162, [16,18)
        float v108 = v106 + v107;	// L163, [18,23)
        v7[v11][((v12 * 16) + 6)] = v108;	// L164, [23,24)
        float v109 = v4[((v10 * 2) + 1)][((v12 * 16) + 7)];	// L165, [12,14)
        float v110 = v109 * v80;	// L166, [14,18)
        float v111 = v7[v11][((v12 * 16) + 7)];	// L167, [16,18)
        float v112 = v110 + v111;	// L168, [18,23)
        v7[v11][((v12 * 16) + 7)] = v112;	// L169, [23,24)
        float v113 = v4[((v10 * 2) + 1)][((v12 * 16) + 8)];	// L170, [12,14)
        float v114 = v113 * v80;	// L171, [14,18)
        float v115 = v7[v11][((v12 * 16) + 8)];	// L172, [16,18)
        float v116 = v114 + v115;	// L173, [18,23)
        v7[v11][((v12 * 16) + 8)] = v116;	// L174, [23,24)
        float v117 = v4[((v10 * 2) + 1)][((v12 * 16) + 9)];	// L175, [12,14)
        float v118 = v117 * v80;	// L176, [14,18)
        float v119 = v7[v11][((v12 * 16) + 9)];	// L177, [16,18)
        float v120 = v118 + v119;	// L178, [18,23)
        v7[v11][((v12 * 16) + 9)] = v120;	// L179, [23,24)
        float v121 = v4[((v10 * 2) + 1)][((v12 * 16) + 10)];	// L180, [12,14)
        float v122 = v121 * v80;	// L181, [14,18)
        float v123 = v7[v11][((v12 * 16) + 10)];	// L182, [16,18)
        float v124 = v122 + v123;	// L183, [18,23)
        v7[v11][((v12 * 16) + 10)] = v124;	// L184, [23,24)
        float v125 = v4[((v10 * 2) + 1)][((v12 * 16) + 11)];	// L185, [12,14)
        float v126 = v125 * v80;	// L186, [14,18)
        float v127 = v7[v11][((v12 * 16) + 11)];	// L187, [16,18)
        float v128 = v126 + v127;	// L188, [18,23)
        v7[v11][((v12 * 16) + 11)] = v128;	// L189, [23,24)
        float v129 = v4[((v10 * 2) + 1)][((v12 * 16) + 12)];	// L190, [12,14)
        float v130 = v129 * v80;	// L191, [14,18)
        float v131 = v7[v11][((v12 * 16) + 12)];	// L192, [16,18)
        float v132 = v130 + v131;	// L193, [18,23)
        v7[v11][((v12 * 16) + 12)] = v132;	// L194, [23,24)
        float v133 = v4[((v10 * 2) + 1)][((v12 * 16) + 13)];	// L195, [12,14)
        float v134 = v133 * v80;	// L196, [14,18)
        float v135 = v7[v11][((v12 * 16) + 13)];	// L197, [16,18)
        float v136 = v134 + v135;	// L198, [18,23)
        v7[v11][((v12 * 16) + 13)] = v136;	// L199, [23,24)
        float v137 = v4[((v10 * 2) + 1)][((v12 * 16) + 14)];	// L200, [12,14)
        float v138 = v137 * v80;	// L201, [14,18)
        float v139 = v7[v11][((v12 * 16) + 14)];	// L202, [16,18)
        float v140 = v138 + v139;	// L203, [18,23)
        v7[v11][((v12 * 16) + 14)] = v140;	// L204, [23,24)
        float v141 = v4[((v10 * 2) + 1)][((v12 * 16) + 15)];	// L205, [12,14)
        float v142 = v141 * v80;	// L206, [14,18)
        float v143 = v7[v11][((v12 * 16) + 15)];	// L207, [16,18)
        float v144 = v142 + v143;	// L208, [18,23)
        v7[v11][((v12 * 16) + 15)] = v144;	// L209, [23,24)
      }
    }
  }
  for (int v145 = 0; v145 < 4096; v145 += 1) {	// L213, [4295491610,4312268834), iterCycle=7, II=1
    for (int v146 = 0; v146 < 4096; v146 += 1) {	// L214, [4294967309,4294971413), iterCycle=7, II=1
      #pragma HLS pipeline II=1
      float v147 = v6[v145][v146];	// L215, [0,2)
      float v148 = v147 * v1;	// L216, [2,6)
      v6[v145][v146] = v148;	// L217, [6,7)
    }
  }
  for (int v149 = 0; v149 < 4096; v149 += 1) {	// L220, [4312268834,8607236143), iterCycle=12, II=1
    for (int v150 = 0; v150 < 2048; v150 += 1) {	// L221, [0,1048589), iterCycle=12, II=1
      for (int v151 = 0; v151 < 512; v151 += 1) {	// L222, [0,525), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v152 = v7[(v150 * 2)][v149];	// L223, [0,2)
        float v153 = v5[v149][(v151 * 8)];	// L224, [0,2)
        float v154 = v152 * v153;	// L225, [2,6)
        float v155 = v6[(v150 * 2)][(v151 * 8)];	// L226, [4,6)
        float v156 = v154 + v155;	// L227, [6,11)
        v6[(v150 * 2)][(v151 * 8)] = v156;	// L228, [11,12)
        float v157 = v5[v149][((v151 * 8) + 1)];	// L229, [0,2)
        float v158 = v152 * v157;	// L230, [2,6)
        float v159 = v6[(v150 * 2)][((v151 * 8) + 1)];	// L231, [4,6)
        float v160 = v158 + v159;	// L232, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 1)] = v160;	// L233, [11,12)
        float v161 = v5[v149][((v151 * 8) + 2)];	// L234, [0,2)
        float v162 = v152 * v161;	// L235, [2,6)
        float v163 = v6[(v150 * 2)][((v151 * 8) + 2)];	// L236, [4,6)
        float v164 = v162 + v163;	// L237, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 2)] = v164;	// L238, [11,12)
        float v165 = v5[v149][((v151 * 8) + 3)];	// L239, [0,2)
        float v166 = v152 * v165;	// L240, [2,6)
        float v167 = v6[(v150 * 2)][((v151 * 8) + 3)];	// L241, [4,6)
        float v168 = v166 + v167;	// L242, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 3)] = v168;	// L243, [11,12)
        float v169 = v5[v149][((v151 * 8) + 4)];	// L244, [0,2)
        float v170 = v152 * v169;	// L245, [2,6)
        float v171 = v6[(v150 * 2)][((v151 * 8) + 4)];	// L246, [4,6)
        float v172 = v170 + v171;	// L247, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 4)] = v172;	// L248, [11,12)
        float v173 = v5[v149][((v151 * 8) + 5)];	// L249, [0,2)
        float v174 = v152 * v173;	// L250, [2,6)
        float v175 = v6[(v150 * 2)][((v151 * 8) + 5)];	// L251, [4,6)
        float v176 = v174 + v175;	// L252, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 5)] = v176;	// L253, [11,12)
        float v177 = v5[v149][((v151 * 8) + 6)];	// L254, [0,2)
        float v178 = v152 * v177;	// L255, [2,6)
        float v179 = v6[(v150 * 2)][((v151 * 8) + 6)];	// L256, [4,6)
        float v180 = v178 + v179;	// L257, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 6)] = v180;	// L258, [11,12)
        float v181 = v5[v149][((v151 * 8) + 7)];	// L259, [0,2)
        float v182 = v152 * v181;	// L260, [2,6)
        float v183 = v6[(v150 * 2)][((v151 * 8) + 7)];	// L261, [4,6)
        float v184 = v182 + v183;	// L262, [6,11)
        v6[(v150 * 2)][((v151 * 8) + 7)] = v184;	// L263, [11,12)
        float v185 = v7[((v150 * 2) + 1)][v149];	// L264, [0,2)
        float v186 = v185 * v153;	// L265, [2,6)
        float v187 = v6[((v150 * 2) + 1)][(v151 * 8)];	// L266, [4,6)
        float v188 = v186 + v187;	// L267, [6,11)
        v6[((v150 * 2) + 1)][(v151 * 8)] = v188;	// L268, [11,12)
        float v189 = v185 * v157;	// L269, [2,6)
        float v190 = v6[((v150 * 2) + 1)][((v151 * 8) + 1)];	// L270, [4,6)
        float v191 = v189 + v190;	// L271, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 1)] = v191;	// L272, [11,12)
        float v192 = v185 * v161;	// L273, [2,6)
        float v193 = v6[((v150 * 2) + 1)][((v151 * 8) + 2)];	// L274, [4,6)
        float v194 = v192 + v193;	// L275, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 2)] = v194;	// L276, [11,12)
        float v195 = v185 * v165;	// L277, [2,6)
        float v196 = v6[((v150 * 2) + 1)][((v151 * 8) + 3)];	// L278, [4,6)
        float v197 = v195 + v196;	// L279, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 3)] = v197;	// L280, [11,12)
        float v198 = v185 * v169;	// L281, [2,6)
        float v199 = v6[((v150 * 2) + 1)][((v151 * 8) + 4)];	// L282, [4,6)
        float v200 = v198 + v199;	// L283, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 4)] = v200;	// L284, [11,12)
        float v201 = v185 * v173;	// L285, [2,6)
        float v202 = v6[((v150 * 2) + 1)][((v151 * 8) + 5)];	// L286, [4,6)
        float v203 = v201 + v202;	// L287, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 5)] = v203;	// L288, [11,12)
        float v204 = v185 * v177;	// L289, [2,6)
        float v205 = v6[((v150 * 2) + 1)][((v151 * 8) + 6)];	// L290, [4,6)
        float v206 = v204 + v205;	// L291, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 6)] = v206;	// L292, [11,12)
        float v207 = v185 * v181;	// L293, [2,6)
        float v208 = v6[((v150 * 2) + 1)][((v151 * 8) + 7)];	// L294, [4,6)
        float v209 = v207 + v208;	// L295, [6,11)
        v6[((v150 * 2) + 1)][((v151 * 8) + 7)] = v209;	// L296, [11,12)
      }
    }
  }
}

