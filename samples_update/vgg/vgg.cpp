
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=3547157, interval=3547157
/// DSP=5, BRAM=0
void vgg(
  float v0,
  float v1[2][64][32][32],
  float v2[64][3][3][3],
  float v3[2][3][34][34],
  float v4[2][64][34][34],
  float v5[2][64][32][32]
) {	// L4, [0,3547157)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5

  #pragma HLS array_partition variable=v1 cyclic factor=4 dim=3
  #pragma HLS array_partition variable=v1 cyclic factor=8 dim=4
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=4 dim=3
  #pragma HLS array_partition variable=v3 cyclic factor=8 dim=4
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=4 dim=3
  #pragma HLS array_partition variable=v5 cyclic factor=8 dim=4
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  for (int v6 = 0; v6 < 2; v6 += 1) {	// L5, [0,4098), iterCycle=1, II=1
    for (int v7 = 0; v7 < 64; v7 += 1) {	// L6, [3543057,3545107), iterCycle=1, II=1
      for (int v8 = 0; v8 < 8; v8 += 1) {	// L7, [3543057,3543091), iterCycle=1, II=1
        for (int v9 = 0; v9 < 4; v9 += 1) {	// L8, [3543057,3543063), iterCycle=1, II=1
          #pragma HLS pipeline II=1
          v1[v6][v7][(v8 * 4)][(v9 * 8)] = v0;	// L9, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 1)] = v0;	// L10, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 2)] = v0;	// L11, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 3)] = v0;	// L12, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 4)] = v0;	// L13, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 5)] = v0;	// L14, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 6)] = v0;	// L15, [0,1)
          v1[v6][v7][(v8 * 4)][((v9 * 8) + 7)] = v0;	// L16, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][(v9 * 8)] = v0;	// L17, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 1)] = v0;	// L18, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 2)] = v0;	// L19, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 3)] = v0;	// L20, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 4)] = v0;	// L21, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 5)] = v0;	// L22, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 6)] = v0;	// L23, [0,1)
          v1[v6][v7][((v8 * 4) + 1)][((v9 * 8) + 7)] = v0;	// L24, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][(v9 * 8)] = v0;	// L25, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 1)] = v0;	// L26, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 2)] = v0;	// L27, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 3)] = v0;	// L28, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 4)] = v0;	// L29, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 5)] = v0;	// L30, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 6)] = v0;	// L31, [0,1)
          v1[v6][v7][((v8 * 4) + 2)][((v9 * 8) + 7)] = v0;	// L32, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][(v9 * 8)] = v0;	// L33, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 1)] = v0;	// L34, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 2)] = v0;	// L35, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 3)] = v0;	// L36, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 4)] = v0;	// L37, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 5)] = v0;	// L38, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 6)] = v0;	// L39, [0,1)
          v1[v6][v7][((v8 * 4) + 3)][((v9 * 8) + 7)] = v0;	// L40, [0,1)
        }
      }
    }
  }
  for (int v10 = 0; v10 < 3; v10 += 1) {	// L45, [4098,3543055), iterCycle=43, II=32
    for (int v11 = 0; v11 < 3; v11 += 1) {	// L46, [4100,1183761), iterCycle=43, II=32
      for (int v12 = 0; v12 < 3; v12 += 1) {	// L47, [4100,397329), iterCycle=43, II=32
        for (int v13 = 0; v13 < 2; v13 += 1) {	// L48, [4100,135185), iterCycle=43, II=32
          for (int v14 = 0; v14 < 64; v14 += 1) {	// L49, [4100,69649), iterCycle=43, II=32
            for (int v15 = 0; v15 < 8; v15 += 1) {	// L50, [4100,5137), iterCycle=43, II=32
              for (int v16 = 0; v16 < 4; v16 += 1) {	// L51, [4100,4241), iterCycle=43, II=32
                #pragma HLS pipeline II=1
                float v17 = v2[v14][v10][v11][v12];	// L52, [31,33)
                float v18 = v3[v13][v10][((v15 * 4) + v11)][((v16 * 8) + v12)];	// L53, [0,2)
                float v19 = v17 * v18;	// L54, [33,37)
                float v20 = v1[v13][v14][(v15 * 4)][(v16 * 8)];	// L55, [35,37)
                float v21 = v19 + v20;	// L56, [37,42)
                v1[v13][v14][(v15 * 4)][(v16 * 8)] = v21;	// L57, [42,43)
                float v22 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 1)];	// L58, [1,3)
                float v23 = v17 * v22;	// L59, [33,37)
                float v24 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 1)];	// L60, [35,37)
                float v25 = v23 + v24;	// L61, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 1)] = v25;	// L62, [42,43)
                float v26 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 2)];	// L63, [2,4)
                float v27 = v17 * v26;	// L64, [33,37)
                float v28 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 2)];	// L65, [35,37)
                float v29 = v27 + v28;	// L66, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 2)] = v29;	// L67, [42,43)
                float v30 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 3)];	// L68, [3,5)
                float v31 = v17 * v30;	// L69, [33,37)
                float v32 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 3)];	// L70, [35,37)
                float v33 = v31 + v32;	// L71, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 3)] = v33;	// L72, [42,43)
                float v34 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 4)];	// L73, [4,6)
                float v35 = v17 * v34;	// L74, [33,37)
                float v36 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 4)];	// L75, [35,37)
                float v37 = v35 + v36;	// L76, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 4)] = v37;	// L77, [42,43)
                float v38 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 5)];	// L78, [5,7)
                float v39 = v17 * v38;	// L79, [33,37)
                float v40 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 5)];	// L80, [35,37)
                float v41 = v39 + v40;	// L81, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 5)] = v41;	// L82, [42,43)
                float v42 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 6)];	// L83, [6,8)
                float v43 = v17 * v42;	// L84, [33,37)
                float v44 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 6)];	// L85, [35,37)
                float v45 = v43 + v44;	// L86, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 6)] = v45;	// L87, [42,43)
                float v46 = v3[v13][v10][((v15 * 4) + v11)][(((v16 * 8) + v12) + 7)];	// L88, [7,9)
                float v47 = v17 * v46;	// L89, [33,37)
                float v48 = v1[v13][v14][(v15 * 4)][((v16 * 8) + 7)];	// L90, [35,37)
                float v49 = v47 + v48;	// L91, [37,42)
                v1[v13][v14][(v15 * 4)][((v16 * 8) + 7)] = v49;	// L92, [42,43)
                float v50 = v3[v13][v10][(((v15 * 4) + v11) + 1)][((v16 * 8) + v12)];	// L93, [8,10)
                float v51 = v17 * v50;	// L94, [33,37)
                float v52 = v1[v13][v14][((v15 * 4) + 1)][(v16 * 8)];	// L95, [35,37)
                float v53 = v51 + v52;	// L96, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][(v16 * 8)] = v53;	// L97, [42,43)
                float v54 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 1)];	// L98, [9,11)
                float v55 = v17 * v54;	// L99, [33,37)
                float v56 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 1)];	// L100, [35,37)
                float v57 = v55 + v56;	// L101, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 1)] = v57;	// L102, [42,43)
                float v58 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 2)];	// L103, [10,12)
                float v59 = v17 * v58;	// L104, [33,37)
                float v60 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 2)];	// L105, [35,37)
                float v61 = v59 + v60;	// L106, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 2)] = v61;	// L107, [42,43)
                float v62 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 3)];	// L108, [11,13)
                float v63 = v17 * v62;	// L109, [33,37)
                float v64 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 3)];	// L110, [35,37)
                float v65 = v63 + v64;	// L111, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 3)] = v65;	// L112, [42,43)
                float v66 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 4)];	// L113, [12,14)
                float v67 = v17 * v66;	// L114, [33,37)
                float v68 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 4)];	// L115, [35,37)
                float v69 = v67 + v68;	// L116, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 4)] = v69;	// L117, [42,43)
                float v70 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 5)];	// L118, [13,15)
                float v71 = v17 * v70;	// L119, [33,37)
                float v72 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 5)];	// L120, [35,37)
                float v73 = v71 + v72;	// L121, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 5)] = v73;	// L122, [42,43)
                float v74 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 6)];	// L123, [14,16)
                float v75 = v17 * v74;	// L124, [33,37)
                float v76 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 6)];	// L125, [35,37)
                float v77 = v75 + v76;	// L126, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 6)] = v77;	// L127, [42,43)
                float v78 = v3[v13][v10][(((v15 * 4) + v11) + 1)][(((v16 * 8) + v12) + 7)];	// L128, [15,17)
                float v79 = v17 * v78;	// L129, [33,37)
                float v80 = v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 7)];	// L130, [35,37)
                float v81 = v79 + v80;	// L131, [37,42)
                v1[v13][v14][((v15 * 4) + 1)][((v16 * 8) + 7)] = v81;	// L132, [42,43)
                float v82 = v3[v13][v10][(((v15 * 4) + v11) + 2)][((v16 * 8) + v12)];	// L133, [16,18)
                float v83 = v17 * v82;	// L134, [33,37)
                float v84 = v1[v13][v14][((v15 * 4) + 2)][(v16 * 8)];	// L135, [35,37)
                float v85 = v83 + v84;	// L136, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][(v16 * 8)] = v85;	// L137, [42,43)
                float v86 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 1)];	// L138, [17,19)
                float v87 = v17 * v86;	// L139, [33,37)
                float v88 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 1)];	// L140, [35,37)
                float v89 = v87 + v88;	// L141, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 1)] = v89;	// L142, [42,43)
                float v90 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 2)];	// L143, [18,20)
                float v91 = v17 * v90;	// L144, [33,37)
                float v92 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 2)];	// L145, [35,37)
                float v93 = v91 + v92;	// L146, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 2)] = v93;	// L147, [42,43)
                float v94 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 3)];	// L148, [19,21)
                float v95 = v17 * v94;	// L149, [33,37)
                float v96 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 3)];	// L150, [35,37)
                float v97 = v95 + v96;	// L151, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 3)] = v97;	// L152, [42,43)
                float v98 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 4)];	// L153, [20,22)
                float v99 = v17 * v98;	// L154, [33,37)
                float v100 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 4)];	// L155, [35,37)
                float v101 = v99 + v100;	// L156, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 4)] = v101;	// L157, [42,43)
                float v102 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 5)];	// L158, [21,23)
                float v103 = v17 * v102;	// L159, [33,37)
                float v104 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 5)];	// L160, [35,37)
                float v105 = v103 + v104;	// L161, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 5)] = v105;	// L162, [42,43)
                float v106 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 6)];	// L163, [22,24)
                float v107 = v17 * v106;	// L164, [33,37)
                float v108 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 6)];	// L165, [35,37)
                float v109 = v107 + v108;	// L166, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 6)] = v109;	// L167, [42,43)
                float v110 = v3[v13][v10][(((v15 * 4) + v11) + 2)][(((v16 * 8) + v12) + 7)];	// L168, [23,25)
                float v111 = v17 * v110;	// L169, [33,37)
                float v112 = v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 7)];	// L170, [35,37)
                float v113 = v111 + v112;	// L171, [37,42)
                v1[v13][v14][((v15 * 4) + 2)][((v16 * 8) + 7)] = v113;	// L172, [42,43)
                float v114 = v3[v13][v10][(((v15 * 4) + v11) + 3)][((v16 * 8) + v12)];	// L173, [24,26)
                float v115 = v17 * v114;	// L174, [33,37)
                float v116 = v1[v13][v14][((v15 * 4) + 3)][(v16 * 8)];	// L175, [35,37)
                float v117 = v115 + v116;	// L176, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][(v16 * 8)] = v117;	// L177, [42,43)
                float v118 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 1)];	// L178, [25,27)
                float v119 = v17 * v118;	// L179, [33,37)
                float v120 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 1)];	// L180, [35,37)
                float v121 = v119 + v120;	// L181, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 1)] = v121;	// L182, [42,43)
                float v122 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 2)];	// L183, [26,28)
                float v123 = v17 * v122;	// L184, [33,37)
                float v124 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 2)];	// L185, [35,37)
                float v125 = v123 + v124;	// L186, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 2)] = v125;	// L187, [42,43)
                float v126 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 3)];	// L188, [27,29)
                float v127 = v17 * v126;	// L189, [33,37)
                float v128 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 3)];	// L190, [35,37)
                float v129 = v127 + v128;	// L191, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 3)] = v129;	// L192, [42,43)
                float v130 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 4)];	// L193, [28,30)
                float v131 = v17 * v130;	// L194, [33,37)
                float v132 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 4)];	// L195, [35,37)
                float v133 = v131 + v132;	// L196, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 4)] = v133;	// L197, [42,43)
                float v134 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 5)];	// L198, [29,31)
                float v135 = v17 * v134;	// L199, [33,37)
                float v136 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 5)];	// L200, [35,37)
                float v137 = v135 + v136;	// L201, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 5)] = v137;	// L202, [42,43)
                float v138 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 6)];	// L203, [30,32)
                float v139 = v17 * v138;	// L204, [33,37)
                float v140 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 6)];	// L205, [35,37)
                float v141 = v139 + v140;	// L206, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 6)] = v141;	// L207, [42,43)
                float v142 = v3[v13][v10][(((v15 * 4) + v11) + 3)][(((v16 * 8) + v12) + 7)];	// L208, [31,33)
                float v143 = v17 * v142;	// L209, [33,37)
                float v144 = v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 7)];	// L210, [35,37)
                float v145 = v143 + v144;	// L211, [37,42)
                v1[v13][v14][((v15 * 4) + 3)][((v16 * 8) + 7)] = v145;	// L212, [42,43)
              }
            }
          }
        }
      }
    }
  }
  for (int v146 = 0; v146 < 2; v146 += 1) {	// L220, [3543055,3547155), iterCycle=3, II=1
    for (int v147 = 0; v147 < 64; v147 += 1) {	// L221, [0,2052), iterCycle=3, II=1
      for (int v148 = 0; v148 < 8; v148 += 1) {	// L222, [0,36), iterCycle=3, II=1
        for (int v149 = 0; v149 < 4; v149 += 1) {	// L223, [0,8), iterCycle=3, II=1
          #pragma HLS pipeline II=1
          float v150 = v1[v146][v147][(v148 * 4)][(v149 * 8)];	// L224, [0,2)
          v5[v146][v147][(v148 * 4)][(v149 * 8)] = v150;	// L225, [2,3)
          float v151 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 1)];	// L226, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 1)] = v151;	// L227, [2,3)
          float v152 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 2)];	// L228, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 2)] = v152;	// L229, [2,3)
          float v153 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 3)];	// L230, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 3)] = v153;	// L231, [2,3)
          float v154 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 4)];	// L232, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 4)] = v154;	// L233, [2,3)
          float v155 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 5)];	// L234, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 5)] = v155;	// L235, [2,3)
          float v156 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 6)];	// L236, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 6)] = v156;	// L237, [2,3)
          float v157 = v1[v146][v147][(v148 * 4)][((v149 * 8) + 7)];	// L238, [0,2)
          v5[v146][v147][(v148 * 4)][((v149 * 8) + 7)] = v157;	// L239, [2,3)
          float v158 = v1[v146][v147][((v148 * 4) + 1)][(v149 * 8)];	// L240, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][(v149 * 8)] = v158;	// L241, [2,3)
          float v159 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 1)];	// L242, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 1)] = v159;	// L243, [2,3)
          float v160 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 2)];	// L244, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 2)] = v160;	// L245, [2,3)
          float v161 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 3)];	// L246, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 3)] = v161;	// L247, [2,3)
          float v162 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 4)];	// L248, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 4)] = v162;	// L249, [2,3)
          float v163 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 5)];	// L250, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 5)] = v163;	// L251, [2,3)
          float v164 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 6)];	// L252, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 6)] = v164;	// L253, [2,3)
          float v165 = v1[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 7)];	// L254, [0,2)
          v5[v146][v147][((v148 * 4) + 1)][((v149 * 8) + 7)] = v165;	// L255, [2,3)
          float v166 = v1[v146][v147][((v148 * 4) + 2)][(v149 * 8)];	// L256, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][(v149 * 8)] = v166;	// L257, [2,3)
          float v167 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 1)];	// L258, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 1)] = v167;	// L259, [2,3)
          float v168 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 2)];	// L260, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 2)] = v168;	// L261, [2,3)
          float v169 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 3)];	// L262, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 3)] = v169;	// L263, [2,3)
          float v170 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 4)];	// L264, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 4)] = v170;	// L265, [2,3)
          float v171 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 5)];	// L266, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 5)] = v171;	// L267, [2,3)
          float v172 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 6)];	// L268, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 6)] = v172;	// L269, [2,3)
          float v173 = v1[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 7)];	// L270, [0,2)
          v5[v146][v147][((v148 * 4) + 2)][((v149 * 8) + 7)] = v173;	// L271, [2,3)
          float v174 = v1[v146][v147][((v148 * 4) + 3)][(v149 * 8)];	// L272, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][(v149 * 8)] = v174;	// L273, [2,3)
          float v175 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 1)];	// L274, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 1)] = v175;	// L275, [2,3)
          float v176 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 2)];	// L276, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 2)] = v176;	// L277, [2,3)
          float v177 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 3)];	// L278, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 3)] = v177;	// L279, [2,3)
          float v178 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 4)];	// L280, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 4)] = v178;	// L281, [2,3)
          float v179 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 5)];	// L282, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 5)] = v179;	// L283, [2,3)
          float v180 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 6)];	// L284, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 6)] = v180;	// L285, [2,3)
          float v181 = v1[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 7)];	// L286, [0,2)
          v5[v146][v147][((v148 * 4) + 3)][((v149 * 8) + 7)] = v181;	// L287, [2,3)
        }
      }
    }
  }
}

