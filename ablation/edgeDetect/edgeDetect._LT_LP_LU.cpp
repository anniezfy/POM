
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=104755289, interval=104755289
/// DSP=12, BRAM=0
void edgeDetect(
  float v0,
  float v1[4096][4096][3],
  float v2[4096][4096][3],
  float v3[4096][4096][3]
) {	// L5, [0,104755289)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3

  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS resource variable=v2 core=ram_s2p_bram
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  for (int v4 = 0; v4 < 2047; v4 += 1) {	// L6, [0,67043389), iterCycle=59, II=16
    for (int v5 = 0; v5 < 2047; v5 += 1) {	// L7, [37711898,37744695), iterCycle=59, II=16
      #pragma HLS pipeline II=1
      float v6 = v2[(v4 * 2)][(v5 * 2)][0];	// L8, [0,2)
      float v7 = v2[(v4 * 2)][((v5 * 2) + 1)][0];	// L9, [1,3)
      float v8 = v6 + v7;	// L10, [4,9)
      float v9 = v2[(v4 * 2)][((v5 * 2) + 2)][0];	// L11, [2,4)
      float v10 = v9 + v8;	// L12, [9,14)
      float v11 = v2[((v4 * 2) + 1)][(v5 * 2)][0];	// L13, [3,5)
      float v12 = v11 + v10;	// L14, [14,19)
      float v13 = v2[((v4 * 2) + 1)][((v5 * 2) + 2)][0];	// L15, [5,7)
      float v14 = v13 + v12;	// L16, [19,24)
      float v15 = v2[((v4 * 2) + 2)][(v5 * 2)][0];	// L17, [14,16)
      float v16 = v15 + v14;	// L18, [24,29)
      float v17 = v2[((v4 * 2) + 2)][((v5 * 2) + 1)][0];	// L19, [15,17)
      float v18 = v17 + v16;	// L20, [29,34)
      float v19 = v2[((v4 * 2) + 2)][((v5 * 2) + 2)][0];	// L21, [19,21)
      float v20 = v19 + v18;	// L22, [34,39)
      float v21 = v20 / v0;	// L23, [39,55)
      v3[(v4 * 2)][(v5 * 2)][0] = v21;	// L24, [55,56)
      float v22 = v7 + v9;	// L25, [5,10)
      float v23 = v2[(v4 * 2)][((v5 * 2) + 3)][0];	// L26, [8,10)
      float v24 = v23 + v22;	// L27, [10,15)
      float v25 = v2[((v4 * 2) + 1)][((v5 * 2) + 1)][0];	// L28, [4,6)
      float v26 = v25 + v24;	// L29, [15,20)
      float v27 = v2[((v4 * 2) + 1)][((v5 * 2) + 3)][0];	// L30, [10,12)
      float v28 = v27 + v26;	// L31, [20,25)
      float v29 = v17 + v28;	// L32, [25,30)
      float v30 = v19 + v29;	// L33, [30,35)
      float v31 = v2[((v4 * 2) + 2)][((v5 * 2) + 3)][0];	// L34, [20,22)
      float v32 = v31 + v30;	// L35, [35,40)
      float v33 = v32 / v0;	// L36, [40,56)
      v3[(v4 * 2)][((v5 * 2) + 1)][0] = v33;	// L37, [56,57)
      float v34 = v11 + v25;	// L38, [6,11)
      float v35 = v13 + v34;	// L39, [11,16)
      float v36 = v15 + v35;	// L40, [16,21)
      float v37 = v19 + v36;	// L41, [21,26)
      float v38 = v2[((v4 * 2) + 3)][(v5 * 2)][0];	// L42, [24,26)
      float v39 = v38 + v37;	// L43, [26,31)
      float v40 = v2[((v4 * 2) + 3)][((v5 * 2) + 1)][0];	// L44, [25,27)
      float v41 = v40 + v39;	// L45, [31,36)
      float v42 = v2[((v4 * 2) + 3)][((v5 * 2) + 2)][0];	// L46, [30,32)
      float v43 = v42 + v41;	// L47, [36,41)
      float v44 = v43 / v0;	// L48, [41,57)
      v3[((v4 * 2) + 1)][(v5 * 2)][0] = v44;	// L49, [57,58)
      float v45 = v25 + v13;	// L50, [7,12)
      float v46 = v27 + v45;	// L51, [12,17)
      float v47 = v17 + v46;	// L52, [17,22)
      float v48 = v31 + v47;	// L53, [22,27)
      float v49 = v40 + v48;	// L54, [27,32)
      float v50 = v42 + v49;	// L55, [32,37)
      float v51 = v2[((v4 * 2) + 3)][((v5 * 2) + 3)][0];	// L56, [35,37)
      float v52 = v51 + v50;	// L57, [37,42)
      float v53 = v52 / v0;	// L58, [42,58)
      v3[((v4 * 2) + 1)][((v5 * 2) + 1)][0] = v53;	// L59, [58,59)
      float v54 = v2[(v4 * 2)][(v5 * 2)][1];	// L60, [0,2)
      float v55 = v2[(v4 * 2)][((v5 * 2) + 1)][1];	// L61, [1,3)
      float v56 = v54 + v55;	// L62, [4,9)
      float v57 = v2[(v4 * 2)][((v5 * 2) + 2)][1];	// L63, [2,4)
      float v58 = v57 + v56;	// L64, [9,14)
      float v59 = v2[((v4 * 2) + 1)][(v5 * 2)][1];	// L65, [3,5)
      float v60 = v59 + v58;	// L66, [14,19)
      float v61 = v2[((v4 * 2) + 1)][((v5 * 2) + 2)][1];	// L67, [5,7)
      float v62 = v61 + v60;	// L68, [19,24)
      float v63 = v2[((v4 * 2) + 2)][(v5 * 2)][1];	// L69, [14,16)
      float v64 = v63 + v62;	// L70, [24,29)
      float v65 = v2[((v4 * 2) + 2)][((v5 * 2) + 1)][1];	// L71, [15,17)
      float v66 = v65 + v64;	// L72, [29,34)
      float v67 = v2[((v4 * 2) + 2)][((v5 * 2) + 2)][1];	// L73, [19,21)
      float v68 = v67 + v66;	// L74, [34,39)
      float v69 = v68 / v0;	// L75, [39,55)
      v3[(v4 * 2)][(v5 * 2)][1] = v69;	// L76, [55,56)
      float v70 = v55 + v57;	// L77, [5,10)
      float v71 = v2[(v4 * 2)][((v5 * 2) + 3)][1];	// L78, [8,10)
      float v72 = v71 + v70;	// L79, [10,15)
      float v73 = v2[((v4 * 2) + 1)][((v5 * 2) + 1)][1];	// L80, [4,6)
      float v74 = v73 + v72;	// L81, [15,20)
      float v75 = v2[((v4 * 2) + 1)][((v5 * 2) + 3)][1];	// L82, [10,12)
      float v76 = v75 + v74;	// L83, [20,25)
      float v77 = v65 + v76;	// L84, [25,30)
      float v78 = v67 + v77;	// L85, [30,35)
      float v79 = v2[((v4 * 2) + 2)][((v5 * 2) + 3)][1];	// L86, [20,22)
      float v80 = v79 + v78;	// L87, [35,40)
      float v81 = v80 / v0;	// L88, [40,56)
      v3[(v4 * 2)][((v5 * 2) + 1)][1] = v81;	// L89, [56,57)
      float v82 = v59 + v73;	// L90, [6,11)
      float v83 = v61 + v82;	// L91, [11,16)
      float v84 = v63 + v83;	// L92, [16,21)
      float v85 = v67 + v84;	// L93, [21,26)
      float v86 = v2[((v4 * 2) + 3)][(v5 * 2)][1];	// L94, [24,26)
      float v87 = v86 + v85;	// L95, [26,31)
      float v88 = v2[((v4 * 2) + 3)][((v5 * 2) + 1)][1];	// L96, [25,27)
      float v89 = v88 + v87;	// L97, [31,36)
      float v90 = v2[((v4 * 2) + 3)][((v5 * 2) + 2)][1];	// L98, [30,32)
      float v91 = v90 + v89;	// L99, [36,41)
      float v92 = v91 / v0;	// L100, [41,57)
      v3[((v4 * 2) + 1)][(v5 * 2)][1] = v92;	// L101, [57,58)
      float v93 = v73 + v61;	// L102, [7,12)
      float v94 = v75 + v93;	// L103, [12,17)
      float v95 = v65 + v94;	// L104, [17,22)
      float v96 = v79 + v95;	// L105, [22,27)
      float v97 = v88 + v96;	// L106, [27,32)
      float v98 = v90 + v97;	// L107, [32,37)
      float v99 = v2[((v4 * 2) + 3)][((v5 * 2) + 3)][1];	// L108, [35,37)
      float v100 = v99 + v98;	// L109, [37,42)
      float v101 = v100 / v0;	// L110, [42,58)
      v3[((v4 * 2) + 1)][((v5 * 2) + 1)][1] = v101;	// L111, [58,59)
      float v102 = v2[(v4 * 2)][(v5 * 2)][2];	// L112, [0,2)
      float v103 = v2[(v4 * 2)][((v5 * 2) + 1)][2];	// L113, [1,3)
      float v104 = v102 + v103;	// L114, [4,9)
      float v105 = v2[(v4 * 2)][((v5 * 2) + 2)][2];	// L115, [2,4)
      float v106 = v105 + v104;	// L116, [9,14)
      float v107 = v2[((v4 * 2) + 1)][(v5 * 2)][2];	// L117, [3,5)
      float v108 = v107 + v106;	// L118, [14,19)
      float v109 = v2[((v4 * 2) + 1)][((v5 * 2) + 2)][2];	// L119, [5,7)
      float v110 = v109 + v108;	// L120, [19,24)
      float v111 = v2[((v4 * 2) + 2)][(v5 * 2)][2];	// L121, [14,16)
      float v112 = v111 + v110;	// L122, [24,29)
      float v113 = v2[((v4 * 2) + 2)][((v5 * 2) + 1)][2];	// L123, [15,17)
      float v114 = v113 + v112;	// L124, [29,34)
      float v115 = v2[((v4 * 2) + 2)][((v5 * 2) + 2)][2];	// L125, [19,21)
      float v116 = v115 + v114;	// L126, [34,39)
      float v117 = v116 / v0;	// L127, [39,55)
      v3[(v4 * 2)][(v5 * 2)][2] = v117;	// L128, [55,56)
      float v118 = v103 + v105;	// L129, [5,10)
      float v119 = v2[(v4 * 2)][((v5 * 2) + 3)][2];	// L130, [8,10)
      float v120 = v119 + v118;	// L131, [10,15)
      float v121 = v2[((v4 * 2) + 1)][((v5 * 2) + 1)][2];	// L132, [4,6)
      float v122 = v121 + v120;	// L133, [15,20)
      float v123 = v2[((v4 * 2) + 1)][((v5 * 2) + 3)][2];	// L134, [10,12)
      float v124 = v123 + v122;	// L135, [20,25)
      float v125 = v113 + v124;	// L136, [25,30)
      float v126 = v115 + v125;	// L137, [30,35)
      float v127 = v2[((v4 * 2) + 2)][((v5 * 2) + 3)][2];	// L138, [20,22)
      float v128 = v127 + v126;	// L139, [35,40)
      float v129 = v128 / v0;	// L140, [40,56)
      v3[(v4 * 2)][((v5 * 2) + 1)][2] = v129;	// L141, [56,57)
      float v130 = v107 + v121;	// L142, [6,11)
      float v131 = v109 + v130;	// L143, [11,16)
      float v132 = v111 + v131;	// L144, [16,21)
      float v133 = v115 + v132;	// L145, [21,26)
      float v134 = v2[((v4 * 2) + 3)][(v5 * 2)][2];	// L146, [24,26)
      float v135 = v134 + v133;	// L147, [26,31)
      float v136 = v2[((v4 * 2) + 3)][((v5 * 2) + 1)][2];	// L148, [25,27)
      float v137 = v136 + v135;	// L149, [31,36)
      float v138 = v2[((v4 * 2) + 3)][((v5 * 2) + 2)][2];	// L150, [30,32)
      float v139 = v138 + v137;	// L151, [36,41)
      float v140 = v139 / v0;	// L152, [41,57)
      v3[((v4 * 2) + 1)][(v5 * 2)][2] = v140;	// L153, [57,58)
      float v141 = v121 + v109;	// L154, [7,12)
      float v142 = v123 + v141;	// L155, [12,17)
      float v143 = v113 + v142;	// L156, [17,22)
      float v144 = v127 + v143;	// L157, [22,27)
      float v145 = v136 + v144;	// L158, [27,32)
      float v146 = v138 + v145;	// L159, [32,37)
      float v147 = v2[((v4 * 2) + 3)][((v5 * 2) + 3)][2];	// L160, [35,37)
      float v148 = v147 + v146;	// L161, [37,42)
      float v149 = v148 / v0;	// L162, [42,58)
      v3[((v4 * 2) + 1)][((v5 * 2) + 1)][2] = v149;	// L163, [58,59)
    }
  }
  for (int v150 = 0; v150 < 2047; v150 += 1) {	// L166, [67043389,104755287), iterCycle=24, II=9
    for (int v151 = 0; v151 < 2047; v151 += 1) {	// L167, [0,18440), iterCycle=24, II=9
      #pragma HLS pipeline II=1
      float v152 = v3[((v150 * 2) + 1)][((v151 * 2) + 1)][0];	// L168, [0,2)
      float v153 = v3[((v150 * 2) + 2)][(v151 * 2)][0];	// L169, [1,3)
      float v154 = v152 - v153;	// L170, [8,13)
      float v155 = v3[((v150 * 2) + 2)][((v151 * 2) + 1)][0];	// L171, [2,4)
      float v156 = v155 + v154;	// L172, [13,18)
      float v157 = v3[((v150 * 2) + 1)][(v151 * 2)][0];	// L173, [16,18)
      float v158 = v157 - v156;	// L174, [18,23)
      v1[(v150 * 2)][(v151 * 2)][0] = v158;	// L175, [23,24)
      float v159 = v3[((v150 * 2) + 1)][((v151 * 2) + 2)][0];	// L176, [3,5)
      float v160 = v159 - v155;	// L177, [8,13)
      float v161 = v3[((v150 * 2) + 2)][((v151 * 2) + 2)][0];	// L178, [4,6)
      float v162 = v161 + v160;	// L179, [13,18)
      float v163 = v152 - v162;	// L180, [18,23)
      v1[(v150 * 2)][((v151 * 2) + 1)][0] = v163;	// L181, [23,24)
      float v164 = v3[((v150 * 2) + 3)][(v151 * 2)][0];	// L182, [5,7)
      float v165 = v155 - v164;	// L183, [8,13)
      float v166 = v3[((v150 * 2) + 3)][((v151 * 2) + 1)][0];	// L184, [6,8)
      float v167 = v166 + v165;	// L185, [13,18)
      float v168 = v153 - v167;	// L186, [18,23)
      v1[((v150 * 2) + 1)][(v151 * 2)][0] = v168;	// L187, [23,24)
      float v169 = v161 - v166;	// L188, [8,13)
      float v170 = v3[((v150 * 2) + 3)][((v151 * 2) + 2)][0];	// L189, [11,13)
      float v171 = v170 + v169;	// L190, [13,18)
      float v172 = v155 - v171;	// L191, [18,23)
      v1[((v150 * 2) + 1)][((v151 * 2) + 1)][0] = v172;	// L192, [23,24)
      float v173 = v3[((v150 * 2) + 1)][((v151 * 2) + 1)][1];	// L193, [0,2)
      float v174 = v3[((v150 * 2) + 2)][(v151 * 2)][1];	// L194, [1,3)
      float v175 = v173 - v174;	// L195, [8,13)
      float v176 = v3[((v150 * 2) + 2)][((v151 * 2) + 1)][1];	// L196, [2,4)
      float v177 = v176 + v175;	// L197, [13,18)
      float v178 = v3[((v150 * 2) + 1)][(v151 * 2)][1];	// L198, [16,18)
      float v179 = v178 - v177;	// L199, [18,23)
      v1[(v150 * 2)][(v151 * 2)][1] = v179;	// L200, [23,24)
      float v180 = v3[((v150 * 2) + 1)][((v151 * 2) + 2)][1];	// L201, [3,5)
      float v181 = v180 - v176;	// L202, [8,13)
      float v182 = v3[((v150 * 2) + 2)][((v151 * 2) + 2)][1];	// L203, [4,6)
      float v183 = v182 + v181;	// L204, [13,18)
      float v184 = v173 - v183;	// L205, [18,23)
      v1[(v150 * 2)][((v151 * 2) + 1)][1] = v184;	// L206, [23,24)
      float v185 = v3[((v150 * 2) + 3)][(v151 * 2)][1];	// L207, [5,7)
      float v186 = v176 - v185;	// L208, [8,13)
      float v187 = v3[((v150 * 2) + 3)][((v151 * 2) + 1)][1];	// L209, [6,8)
      float v188 = v187 + v186;	// L210, [13,18)
      float v189 = v174 - v188;	// L211, [18,23)
      v1[((v150 * 2) + 1)][(v151 * 2)][1] = v189;	// L212, [23,24)
      float v190 = v182 - v187;	// L213, [8,13)
      float v191 = v3[((v150 * 2) + 3)][((v151 * 2) + 2)][1];	// L214, [11,13)
      float v192 = v191 + v190;	// L215, [13,18)
      float v193 = v176 - v192;	// L216, [18,23)
      v1[((v150 * 2) + 1)][((v151 * 2) + 1)][1] = v193;	// L217, [23,24)
      float v194 = v3[((v150 * 2) + 1)][((v151 * 2) + 1)][2];	// L218, [0,2)
      float v195 = v3[((v150 * 2) + 2)][(v151 * 2)][2];	// L219, [1,3)
      float v196 = v194 - v195;	// L220, [8,13)
      float v197 = v3[((v150 * 2) + 2)][((v151 * 2) + 1)][2];	// L221, [2,4)
      float v198 = v197 + v196;	// L222, [13,18)
      float v199 = v3[((v150 * 2) + 1)][(v151 * 2)][2];	// L223, [16,18)
      float v200 = v199 - v198;	// L224, [18,23)
      v1[(v150 * 2)][(v151 * 2)][2] = v200;	// L225, [23,24)
      float v201 = v3[((v150 * 2) + 1)][((v151 * 2) + 2)][2];	// L226, [3,5)
      float v202 = v201 - v197;	// L227, [8,13)
      float v203 = v3[((v150 * 2) + 2)][((v151 * 2) + 2)][2];	// L228, [4,6)
      float v204 = v203 + v202;	// L229, [13,18)
      float v205 = v194 - v204;	// L230, [18,23)
      v1[(v150 * 2)][((v151 * 2) + 1)][2] = v205;	// L231, [23,24)
      float v206 = v3[((v150 * 2) + 3)][(v151 * 2)][2];	// L232, [5,7)
      float v207 = v197 - v206;	// L233, [8,13)
      float v208 = v3[((v150 * 2) + 3)][((v151 * 2) + 1)][2];	// L234, [6,8)
      float v209 = v208 + v207;	// L235, [13,18)
      float v210 = v195 - v209;	// L236, [18,23)
      v1[((v150 * 2) + 1)][(v151 * 2)][2] = v210;	// L237, [23,24)
      float v211 = v203 - v208;	// L238, [8,13)
      float v212 = v3[((v150 * 2) + 3)][((v151 * 2) + 2)][2];	// L239, [11,13)
      float v213 = v212 + v211;	// L240, [13,18)
      float v214 = v197 - v213;	// L241, [18,23)
      v1[((v150 * 2) + 1)][((v151 * 2) + 1)][2] = v214;	// L242, [23,24)
    }
  }
}

