
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=426543, interval=426543
/// DSP=80, BRAM=0
void 3mm_128(
  float v0,
  float v1[128][128],
  float v2[128][128],
  float v3[128][128],
  float v4[128][128],
  float v5[128][128],
  float v6[128][128],
  float v7[128][128]
) {	// L5, [0,426543)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6
  #pragma HLS interface bram port=v7

  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=16 dim=2
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v5 cyclic factor=16 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=16 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  #pragma HLS array_partition variable=v7 cyclic factor=16 dim=2
  #pragma HLS resource variable=v7 core=ram_s2p_bram

  for (int v8 = 0; v8 < 64; v8 += 1) {	// L6, [0,514), iterCycle=1, II=1
    for (int v9 = 0; v9 < 8; v9 += 1) {	// L7, [426027,426037), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v5[(v8 * 2)][(v9 * 16)] = v0;	// L8, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 1)] = v0;	// L9, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 2)] = v0;	// L10, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 3)] = v0;	// L11, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 4)] = v0;	// L12, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 5)] = v0;	// L13, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 6)] = v0;	// L14, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 7)] = v0;	// L15, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 8)] = v0;	// L16, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 9)] = v0;	// L17, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 10)] = v0;	// L18, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 11)] = v0;	// L19, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 12)] = v0;	// L20, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 13)] = v0;	// L21, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 14)] = v0;	// L22, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 15)] = v0;	// L23, [0,1)
      v5[((v8 * 2) + 1)][(v9 * 16)] = v0;	// L24, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 1)] = v0;	// L25, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 2)] = v0;	// L26, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 3)] = v0;	// L27, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 4)] = v0;	// L28, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 5)] = v0;	// L29, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 6)] = v0;	// L30, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 7)] = v0;	// L31, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 8)] = v0;	// L32, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 9)] = v0;	// L33, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 10)] = v0;	// L34, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 11)] = v0;	// L35, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 12)] = v0;	// L36, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 13)] = v0;	// L37, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 14)] = v0;	// L38, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 15)] = v0;	// L39, [0,1)
    }
  }
  for (int v10 = 0; v10 < 128; v10 += 1) {	// L42, [514,131599), iterCycle=12, II=1
    for (int v11 = 0; v11 < 128; v11 += 1) {	// L43, [294942,295979), iterCycle=12, II=1
      for (int v12 = 0; v12 < 8; v12 += 1) {	// L44, [294942,294963), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v13 = v1[v11][v10];	// L45, [0,2)
        float v14 = v2[v10][(v12 * 16)];	// L46, [0,2)
        float v15 = v13 * v14;	// L47, [2,6)
        float v16 = v5[v11][(v12 * 16)];	// L48, [4,6)
        float v17 = v15 + v16;	// L49, [6,11)
        v5[v11][(v12 * 16)] = v17;	// L50, [11,12)
        float v18 = v2[v10][((v12 * 16) + 1)];	// L51, [0,2)
        float v19 = v13 * v18;	// L52, [2,6)
        float v20 = v5[v11][((v12 * 16) + 1)];	// L53, [4,6)
        float v21 = v19 + v20;	// L54, [6,11)
        v5[v11][((v12 * 16) + 1)] = v21;	// L55, [11,12)
        float v22 = v2[v10][((v12 * 16) + 2)];	// L56, [0,2)
        float v23 = v13 * v22;	// L57, [2,6)
        float v24 = v5[v11][((v12 * 16) + 2)];	// L58, [4,6)
        float v25 = v23 + v24;	// L59, [6,11)
        v5[v11][((v12 * 16) + 2)] = v25;	// L60, [11,12)
        float v26 = v2[v10][((v12 * 16) + 3)];	// L61, [0,2)
        float v27 = v13 * v26;	// L62, [2,6)
        float v28 = v5[v11][((v12 * 16) + 3)];	// L63, [4,6)
        float v29 = v27 + v28;	// L64, [6,11)
        v5[v11][((v12 * 16) + 3)] = v29;	// L65, [11,12)
        float v30 = v2[v10][((v12 * 16) + 4)];	// L66, [0,2)
        float v31 = v13 * v30;	// L67, [2,6)
        float v32 = v5[v11][((v12 * 16) + 4)];	// L68, [4,6)
        float v33 = v31 + v32;	// L69, [6,11)
        v5[v11][((v12 * 16) + 4)] = v33;	// L70, [11,12)
        float v34 = v2[v10][((v12 * 16) + 5)];	// L71, [0,2)
        float v35 = v13 * v34;	// L72, [2,6)
        float v36 = v5[v11][((v12 * 16) + 5)];	// L73, [4,6)
        float v37 = v35 + v36;	// L74, [6,11)
        v5[v11][((v12 * 16) + 5)] = v37;	// L75, [11,12)
        float v38 = v2[v10][((v12 * 16) + 6)];	// L76, [0,2)
        float v39 = v13 * v38;	// L77, [2,6)
        float v40 = v5[v11][((v12 * 16) + 6)];	// L78, [4,6)
        float v41 = v39 + v40;	// L79, [6,11)
        v5[v11][((v12 * 16) + 6)] = v41;	// L80, [11,12)
        float v42 = v2[v10][((v12 * 16) + 7)];	// L81, [0,2)
        float v43 = v13 * v42;	// L82, [2,6)
        float v44 = v5[v11][((v12 * 16) + 7)];	// L83, [4,6)
        float v45 = v43 + v44;	// L84, [6,11)
        v5[v11][((v12 * 16) + 7)] = v45;	// L85, [11,12)
        float v46 = v2[v10][((v12 * 16) + 8)];	// L86, [0,2)
        float v47 = v13 * v46;	// L87, [2,6)
        float v48 = v5[v11][((v12 * 16) + 8)];	// L88, [4,6)
        float v49 = v47 + v48;	// L89, [6,11)
        v5[v11][((v12 * 16) + 8)] = v49;	// L90, [11,12)
        float v50 = v2[v10][((v12 * 16) + 9)];	// L91, [0,2)
        float v51 = v13 * v50;	// L92, [2,6)
        float v52 = v5[v11][((v12 * 16) + 9)];	// L93, [4,6)
        float v53 = v51 + v52;	// L94, [6,11)
        v5[v11][((v12 * 16) + 9)] = v53;	// L95, [11,12)
        float v54 = v2[v10][((v12 * 16) + 10)];	// L96, [0,2)
        float v55 = v13 * v54;	// L97, [2,6)
        float v56 = v5[v11][((v12 * 16) + 10)];	// L98, [4,6)
        float v57 = v55 + v56;	// L99, [6,11)
        v5[v11][((v12 * 16) + 10)] = v57;	// L100, [11,12)
        float v58 = v2[v10][((v12 * 16) + 11)];	// L101, [0,2)
        float v59 = v13 * v58;	// L102, [2,6)
        float v60 = v5[v11][((v12 * 16) + 11)];	// L103, [4,6)
        float v61 = v59 + v60;	// L104, [6,11)
        v5[v11][((v12 * 16) + 11)] = v61;	// L105, [11,12)
        float v62 = v2[v10][((v12 * 16) + 12)];	// L106, [0,2)
        float v63 = v13 * v62;	// L107, [2,6)
        float v64 = v5[v11][((v12 * 16) + 12)];	// L108, [4,6)
        float v65 = v63 + v64;	// L109, [6,11)
        v5[v11][((v12 * 16) + 12)] = v65;	// L110, [11,12)
        float v66 = v2[v10][((v12 * 16) + 13)];	// L111, [0,2)
        float v67 = v13 * v66;	// L112, [2,6)
        float v68 = v5[v11][((v12 * 16) + 13)];	// L113, [4,6)
        float v69 = v67 + v68;	// L114, [6,11)
        v5[v11][((v12 * 16) + 13)] = v69;	// L115, [11,12)
        float v70 = v2[v10][((v12 * 16) + 14)];	// L116, [0,2)
        float v71 = v13 * v70;	// L117, [2,6)
        float v72 = v5[v11][((v12 * 16) + 14)];	// L118, [4,6)
        float v73 = v71 + v72;	// L119, [6,11)
        v5[v11][((v12 * 16) + 14)] = v73;	// L120, [11,12)
        float v74 = v2[v10][((v12 * 16) + 15)];	// L121, [0,2)
        float v75 = v13 * v74;	// L122, [2,6)
        float v76 = v5[v11][((v12 * 16) + 15)];	// L123, [4,6)
        float v77 = v75 + v76;	// L124, [6,11)
        v5[v11][((v12 * 16) + 15)] = v77;	// L125, [11,12)
      }
    }
  }
  for (int v78 = 0; v78 < 128; v78 += 1) {	// L129, [131599,147985), iterCycle=1, II=1
    for (int v79 = 0; v79 < 128; v79 += 1) {	// L130, [278556,278686), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v6[v78][v79] = v0;	// L131, [0,1)
    }
  }
  for (int v80 = 0; v80 < 128; v80 += 1) {	// L134, [147985,279070), iterCycle=12, II=1
    for (int v81 = 0; v81 < 128; v81 += 1) {	// L135, [147471,148508), iterCycle=12, II=1
      for (int v82 = 0; v82 < 8; v82 += 1) {	// L136, [147471,147492), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v83 = v3[v81][v80];	// L137, [0,2)
        float v84 = v4[v80][(v82 * 16)];	// L138, [0,2)
        float v85 = v83 * v84;	// L139, [2,6)
        float v86 = v6[v81][(v82 * 16)];	// L140, [4,6)
        float v87 = v85 + v86;	// L141, [6,11)
        v6[v81][(v82 * 16)] = v87;	// L142, [11,12)
        float v88 = v4[v80][((v82 * 16) + 1)];	// L143, [0,2)
        float v89 = v83 * v88;	// L144, [2,6)
        float v90 = v6[v81][((v82 * 16) + 1)];	// L145, [4,6)
        float v91 = v89 + v90;	// L146, [6,11)
        v6[v81][((v82 * 16) + 1)] = v91;	// L147, [11,12)
        float v92 = v4[v80][((v82 * 16) + 2)];	// L148, [0,2)
        float v93 = v83 * v92;	// L149, [2,6)
        float v94 = v6[v81][((v82 * 16) + 2)];	// L150, [4,6)
        float v95 = v93 + v94;	// L151, [6,11)
        v6[v81][((v82 * 16) + 2)] = v95;	// L152, [11,12)
        float v96 = v4[v80][((v82 * 16) + 3)];	// L153, [0,2)
        float v97 = v83 * v96;	// L154, [2,6)
        float v98 = v6[v81][((v82 * 16) + 3)];	// L155, [4,6)
        float v99 = v97 + v98;	// L156, [6,11)
        v6[v81][((v82 * 16) + 3)] = v99;	// L157, [11,12)
        float v100 = v4[v80][((v82 * 16) + 4)];	// L158, [0,2)
        float v101 = v83 * v100;	// L159, [2,6)
        float v102 = v6[v81][((v82 * 16) + 4)];	// L160, [4,6)
        float v103 = v101 + v102;	// L161, [6,11)
        v6[v81][((v82 * 16) + 4)] = v103;	// L162, [11,12)
        float v104 = v4[v80][((v82 * 16) + 5)];	// L163, [0,2)
        float v105 = v83 * v104;	// L164, [2,6)
        float v106 = v6[v81][((v82 * 16) + 5)];	// L165, [4,6)
        float v107 = v105 + v106;	// L166, [6,11)
        v6[v81][((v82 * 16) + 5)] = v107;	// L167, [11,12)
        float v108 = v4[v80][((v82 * 16) + 6)];	// L168, [0,2)
        float v109 = v83 * v108;	// L169, [2,6)
        float v110 = v6[v81][((v82 * 16) + 6)];	// L170, [4,6)
        float v111 = v109 + v110;	// L171, [6,11)
        v6[v81][((v82 * 16) + 6)] = v111;	// L172, [11,12)
        float v112 = v4[v80][((v82 * 16) + 7)];	// L173, [0,2)
        float v113 = v83 * v112;	// L174, [2,6)
        float v114 = v6[v81][((v82 * 16) + 7)];	// L175, [4,6)
        float v115 = v113 + v114;	// L176, [6,11)
        v6[v81][((v82 * 16) + 7)] = v115;	// L177, [11,12)
        float v116 = v4[v80][((v82 * 16) + 8)];	// L178, [0,2)
        float v117 = v83 * v116;	// L179, [2,6)
        float v118 = v6[v81][((v82 * 16) + 8)];	// L180, [4,6)
        float v119 = v117 + v118;	// L181, [6,11)
        v6[v81][((v82 * 16) + 8)] = v119;	// L182, [11,12)
        float v120 = v4[v80][((v82 * 16) + 9)];	// L183, [0,2)
        float v121 = v83 * v120;	// L184, [2,6)
        float v122 = v6[v81][((v82 * 16) + 9)];	// L185, [4,6)
        float v123 = v121 + v122;	// L186, [6,11)
        v6[v81][((v82 * 16) + 9)] = v123;	// L187, [11,12)
        float v124 = v4[v80][((v82 * 16) + 10)];	// L188, [0,2)
        float v125 = v83 * v124;	// L189, [2,6)
        float v126 = v6[v81][((v82 * 16) + 10)];	// L190, [4,6)
        float v127 = v125 + v126;	// L191, [6,11)
        v6[v81][((v82 * 16) + 10)] = v127;	// L192, [11,12)
        float v128 = v4[v80][((v82 * 16) + 11)];	// L193, [0,2)
        float v129 = v83 * v128;	// L194, [2,6)
        float v130 = v6[v81][((v82 * 16) + 11)];	// L195, [4,6)
        float v131 = v129 + v130;	// L196, [6,11)
        v6[v81][((v82 * 16) + 11)] = v131;	// L197, [11,12)
        float v132 = v4[v80][((v82 * 16) + 12)];	// L198, [0,2)
        float v133 = v83 * v132;	// L199, [2,6)
        float v134 = v6[v81][((v82 * 16) + 12)];	// L200, [4,6)
        float v135 = v133 + v134;	// L201, [6,11)
        v6[v81][((v82 * 16) + 12)] = v135;	// L202, [11,12)
        float v136 = v4[v80][((v82 * 16) + 13)];	// L203, [0,2)
        float v137 = v83 * v136;	// L204, [2,6)
        float v138 = v6[v81][((v82 * 16) + 13)];	// L205, [4,6)
        float v139 = v137 + v138;	// L206, [6,11)
        v6[v81][((v82 * 16) + 13)] = v139;	// L207, [11,12)
        float v140 = v4[v80][((v82 * 16) + 14)];	// L208, [0,2)
        float v141 = v83 * v140;	// L209, [2,6)
        float v142 = v6[v81][((v82 * 16) + 14)];	// L210, [4,6)
        float v143 = v141 + v142;	// L211, [6,11)
        v6[v81][((v82 * 16) + 14)] = v143;	// L212, [11,12)
        float v144 = v4[v80][((v82 * 16) + 15)];	// L213, [0,2)
        float v145 = v83 * v144;	// L214, [2,6)
        float v146 = v6[v81][((v82 * 16) + 15)];	// L215, [4,6)
        float v147 = v145 + v146;	// L216, [6,11)
        v6[v81][((v82 * 16) + 15)] = v147;	// L217, [11,12)
      }
    }
  }
  for (int v148 = 0; v148 < 128; v148 += 1) {	// L221, [279070,295456), iterCycle=1, II=1
    for (int v149 = 0; v149 < 128; v149 += 1) {	// L222, [131085,131215), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v7[v148][v149] = v0;	// L223, [0,1)
    }
  }
  for (int v150 = 0; v150 < 128; v150 += 1) {	// L226, [295456,426541), iterCycle=12, II=1
    for (int v151 = 0; v151 < 128; v151 += 1) {	// L227, [0,1037), iterCycle=12, II=1
      for (int v152 = 0; v152 < 8; v152 += 1) {	// L228, [0,21), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v153 = v5[v151][v150];	// L229, [0,2)
        float v154 = v6[v150][(v152 * 16)];	// L230, [0,2)
        float v155 = v153 * v154;	// L231, [2,6)
        float v156 = v7[v151][(v152 * 16)];	// L232, [4,6)
        float v157 = v155 + v156;	// L233, [6,11)
        v7[v151][(v152 * 16)] = v157;	// L234, [11,12)
        float v158 = v6[v150][((v152 * 16) + 1)];	// L235, [0,2)
        float v159 = v153 * v158;	// L236, [2,6)
        float v160 = v7[v151][((v152 * 16) + 1)];	// L237, [4,6)
        float v161 = v159 + v160;	// L238, [6,11)
        v7[v151][((v152 * 16) + 1)] = v161;	// L239, [11,12)
        float v162 = v6[v150][((v152 * 16) + 2)];	// L240, [0,2)
        float v163 = v153 * v162;	// L241, [2,6)
        float v164 = v7[v151][((v152 * 16) + 2)];	// L242, [4,6)
        float v165 = v163 + v164;	// L243, [6,11)
        v7[v151][((v152 * 16) + 2)] = v165;	// L244, [11,12)
        float v166 = v6[v150][((v152 * 16) + 3)];	// L245, [0,2)
        float v167 = v153 * v166;	// L246, [2,6)
        float v168 = v7[v151][((v152 * 16) + 3)];	// L247, [4,6)
        float v169 = v167 + v168;	// L248, [6,11)
        v7[v151][((v152 * 16) + 3)] = v169;	// L249, [11,12)
        float v170 = v6[v150][((v152 * 16) + 4)];	// L250, [0,2)
        float v171 = v153 * v170;	// L251, [2,6)
        float v172 = v7[v151][((v152 * 16) + 4)];	// L252, [4,6)
        float v173 = v171 + v172;	// L253, [6,11)
        v7[v151][((v152 * 16) + 4)] = v173;	// L254, [11,12)
        float v174 = v6[v150][((v152 * 16) + 5)];	// L255, [0,2)
        float v175 = v153 * v174;	// L256, [2,6)
        float v176 = v7[v151][((v152 * 16) + 5)];	// L257, [4,6)
        float v177 = v175 + v176;	// L258, [6,11)
        v7[v151][((v152 * 16) + 5)] = v177;	// L259, [11,12)
        float v178 = v6[v150][((v152 * 16) + 6)];	// L260, [0,2)
        float v179 = v153 * v178;	// L261, [2,6)
        float v180 = v7[v151][((v152 * 16) + 6)];	// L262, [4,6)
        float v181 = v179 + v180;	// L263, [6,11)
        v7[v151][((v152 * 16) + 6)] = v181;	// L264, [11,12)
        float v182 = v6[v150][((v152 * 16) + 7)];	// L265, [0,2)
        float v183 = v153 * v182;	// L266, [2,6)
        float v184 = v7[v151][((v152 * 16) + 7)];	// L267, [4,6)
        float v185 = v183 + v184;	// L268, [6,11)
        v7[v151][((v152 * 16) + 7)] = v185;	// L269, [11,12)
        float v186 = v6[v150][((v152 * 16) + 8)];	// L270, [0,2)
        float v187 = v153 * v186;	// L271, [2,6)
        float v188 = v7[v151][((v152 * 16) + 8)];	// L272, [4,6)
        float v189 = v187 + v188;	// L273, [6,11)
        v7[v151][((v152 * 16) + 8)] = v189;	// L274, [11,12)
        float v190 = v6[v150][((v152 * 16) + 9)];	// L275, [0,2)
        float v191 = v153 * v190;	// L276, [2,6)
        float v192 = v7[v151][((v152 * 16) + 9)];	// L277, [4,6)
        float v193 = v191 + v192;	// L278, [6,11)
        v7[v151][((v152 * 16) + 9)] = v193;	// L279, [11,12)
        float v194 = v6[v150][((v152 * 16) + 10)];	// L280, [0,2)
        float v195 = v153 * v194;	// L281, [2,6)
        float v196 = v7[v151][((v152 * 16) + 10)];	// L282, [4,6)
        float v197 = v195 + v196;	// L283, [6,11)
        v7[v151][((v152 * 16) + 10)] = v197;	// L284, [11,12)
        float v198 = v6[v150][((v152 * 16) + 11)];	// L285, [0,2)
        float v199 = v153 * v198;	// L286, [2,6)
        float v200 = v7[v151][((v152 * 16) + 11)];	// L287, [4,6)
        float v201 = v199 + v200;	// L288, [6,11)
        v7[v151][((v152 * 16) + 11)] = v201;	// L289, [11,12)
        float v202 = v6[v150][((v152 * 16) + 12)];	// L290, [0,2)
        float v203 = v153 * v202;	// L291, [2,6)
        float v204 = v7[v151][((v152 * 16) + 12)];	// L292, [4,6)
        float v205 = v203 + v204;	// L293, [6,11)
        v7[v151][((v152 * 16) + 12)] = v205;	// L294, [11,12)
        float v206 = v6[v150][((v152 * 16) + 13)];	// L295, [0,2)
        float v207 = v153 * v206;	// L296, [2,6)
        float v208 = v7[v151][((v152 * 16) + 13)];	// L297, [4,6)
        float v209 = v207 + v208;	// L298, [6,11)
        v7[v151][((v152 * 16) + 13)] = v209;	// L299, [11,12)
        float v210 = v6[v150][((v152 * 16) + 14)];	// L300, [0,2)
        float v211 = v153 * v210;	// L301, [2,6)
        float v212 = v7[v151][((v152 * 16) + 14)];	// L302, [4,6)
        float v213 = v211 + v212;	// L303, [6,11)
        v7[v151][((v152 * 16) + 14)] = v213;	// L304, [11,12)
        float v214 = v6[v150][((v152 * 16) + 15)];	// L305, [0,2)
        float v215 = v153 * v214;	// L306, [2,6)
        float v216 = v7[v151][((v152 * 16) + 15)];	// L307, [4,6)
        float v217 = v215 + v216;	// L308, [6,11)
        v7[v151][((v152 * 16) + 15)] = v217;	// L309, [11,12)
      }
    }
  }
}

