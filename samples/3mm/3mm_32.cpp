
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=5199, interval=5199
/// DSP=160, BRAM=0
void 3mm_32(
  float v0,
  float v1[32][32],
  float v2[32][32],
  float v3[32][32],
  float v4[32][32],
  float v5[32][32],
  float v6[32][32],
  float v7[32][32]
) {	// L5, [0,5199)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6
  #pragma HLS interface bram port=v7

  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=1
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=16 dim=2
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v5 cyclic factor=16 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v6 cyclic factor=16 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  #pragma HLS array_partition variable=v7 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v7 cyclic factor=16 dim=2
  #pragma HLS resource variable=v7 core=ram_s2p_bram

  for (int v8 = 0; v8 < 16; v8 += 1) {	// L6, [0,34), iterCycle=1, II=1
    for (int v9 = 0; v9 < 2; v9 += 1) {	// L7, [5163,5167), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v5[(v8 * 2)][(v9 * 16)] = v0;	// L8, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 1)] = v0;	// L9, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 2)] = v0;	// L10, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 3)] = v0;	// L11, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 4)] = v0;	// L12, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 5)] = v0;	// L13, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 6)] = v0;	// L14, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 7)] = v0;	// L15, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 8)] = v0;	// L16, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 9)] = v0;	// L17, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 10)] = v0;	// L18, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 11)] = v0;	// L19, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 12)] = v0;	// L20, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 13)] = v0;	// L21, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 14)] = v0;	// L22, [0,1)
      v5[(v8 * 2)][((v9 * 16) + 15)] = v0;	// L23, [0,1)
      v5[((v8 * 2) + 1)][(v9 * 16)] = v0;	// L24, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 1)] = v0;	// L25, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 2)] = v0;	// L26, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 3)] = v0;	// L27, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 4)] = v0;	// L28, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 5)] = v0;	// L29, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 6)] = v0;	// L30, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 7)] = v0;	// L31, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 8)] = v0;	// L32, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 9)] = v0;	// L33, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 10)] = v0;	// L34, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 11)] = v0;	// L35, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 12)] = v0;	// L36, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 13)] = v0;	// L37, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 14)] = v0;	// L38, [0,1)
      v5[((v8 * 2) + 1)][((v9 * 16) + 15)] = v0;	// L39, [0,1)
    }
  }
  for (int v10 = 0; v10 < 32; v10 += 1) {	// L42, [34,1071), iterCycle=12, II=1
    for (int v11 = 0; v11 < 16; v11 += 1) {	// L43, [4126,4171), iterCycle=12, II=1
      for (int v12 = 0; v12 < 2; v12 += 1) {	// L44, [4126,4141), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v13 = v1[(v11 * 2)][v10];	// L45, [0,2)
        float v14 = v2[v10][(v12 * 16)];	// L46, [0,2)
        float v15 = v13 * v14;	// L47, [2,6)
        float v16 = v5[(v11 * 2)][(v12 * 16)];	// L48, [4,6)
        float v17 = v15 + v16;	// L49, [6,11)
        v5[(v11 * 2)][(v12 * 16)] = v17;	// L50, [11,12)
        float v18 = v2[v10][((v12 * 16) + 1)];	// L51, [0,2)
        float v19 = v13 * v18;	// L52, [2,6)
        float v20 = v5[(v11 * 2)][((v12 * 16) + 1)];	// L53, [4,6)
        float v21 = v19 + v20;	// L54, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 1)] = v21;	// L55, [11,12)
        float v22 = v2[v10][((v12 * 16) + 2)];	// L56, [0,2)
        float v23 = v13 * v22;	// L57, [2,6)
        float v24 = v5[(v11 * 2)][((v12 * 16) + 2)];	// L58, [4,6)
        float v25 = v23 + v24;	// L59, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 2)] = v25;	// L60, [11,12)
        float v26 = v2[v10][((v12 * 16) + 3)];	// L61, [0,2)
        float v27 = v13 * v26;	// L62, [2,6)
        float v28 = v5[(v11 * 2)][((v12 * 16) + 3)];	// L63, [4,6)
        float v29 = v27 + v28;	// L64, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 3)] = v29;	// L65, [11,12)
        float v30 = v2[v10][((v12 * 16) + 4)];	// L66, [0,2)
        float v31 = v13 * v30;	// L67, [2,6)
        float v32 = v5[(v11 * 2)][((v12 * 16) + 4)];	// L68, [4,6)
        float v33 = v31 + v32;	// L69, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 4)] = v33;	// L70, [11,12)
        float v34 = v2[v10][((v12 * 16) + 5)];	// L71, [0,2)
        float v35 = v13 * v34;	// L72, [2,6)
        float v36 = v5[(v11 * 2)][((v12 * 16) + 5)];	// L73, [4,6)
        float v37 = v35 + v36;	// L74, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 5)] = v37;	// L75, [11,12)
        float v38 = v2[v10][((v12 * 16) + 6)];	// L76, [0,2)
        float v39 = v13 * v38;	// L77, [2,6)
        float v40 = v5[(v11 * 2)][((v12 * 16) + 6)];	// L78, [4,6)
        float v41 = v39 + v40;	// L79, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 6)] = v41;	// L80, [11,12)
        float v42 = v2[v10][((v12 * 16) + 7)];	// L81, [0,2)
        float v43 = v13 * v42;	// L82, [2,6)
        float v44 = v5[(v11 * 2)][((v12 * 16) + 7)];	// L83, [4,6)
        float v45 = v43 + v44;	// L84, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 7)] = v45;	// L85, [11,12)
        float v46 = v2[v10][((v12 * 16) + 8)];	// L86, [0,2)
        float v47 = v13 * v46;	// L87, [2,6)
        float v48 = v5[(v11 * 2)][((v12 * 16) + 8)];	// L88, [4,6)
        float v49 = v47 + v48;	// L89, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 8)] = v49;	// L90, [11,12)
        float v50 = v2[v10][((v12 * 16) + 9)];	// L91, [0,2)
        float v51 = v13 * v50;	// L92, [2,6)
        float v52 = v5[(v11 * 2)][((v12 * 16) + 9)];	// L93, [4,6)
        float v53 = v51 + v52;	// L94, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 9)] = v53;	// L95, [11,12)
        float v54 = v2[v10][((v12 * 16) + 10)];	// L96, [0,2)
        float v55 = v13 * v54;	// L97, [2,6)
        float v56 = v5[(v11 * 2)][((v12 * 16) + 10)];	// L98, [4,6)
        float v57 = v55 + v56;	// L99, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 10)] = v57;	// L100, [11,12)
        float v58 = v2[v10][((v12 * 16) + 11)];	// L101, [0,2)
        float v59 = v13 * v58;	// L102, [2,6)
        float v60 = v5[(v11 * 2)][((v12 * 16) + 11)];	// L103, [4,6)
        float v61 = v59 + v60;	// L104, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 11)] = v61;	// L105, [11,12)
        float v62 = v2[v10][((v12 * 16) + 12)];	// L106, [0,2)
        float v63 = v13 * v62;	// L107, [2,6)
        float v64 = v5[(v11 * 2)][((v12 * 16) + 12)];	// L108, [4,6)
        float v65 = v63 + v64;	// L109, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 12)] = v65;	// L110, [11,12)
        float v66 = v2[v10][((v12 * 16) + 13)];	// L111, [0,2)
        float v67 = v13 * v66;	// L112, [2,6)
        float v68 = v5[(v11 * 2)][((v12 * 16) + 13)];	// L113, [4,6)
        float v69 = v67 + v68;	// L114, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 13)] = v69;	// L115, [11,12)
        float v70 = v2[v10][((v12 * 16) + 14)];	// L116, [0,2)
        float v71 = v13 * v70;	// L117, [2,6)
        float v72 = v5[(v11 * 2)][((v12 * 16) + 14)];	// L118, [4,6)
        float v73 = v71 + v72;	// L119, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 14)] = v73;	// L120, [11,12)
        float v74 = v2[v10][((v12 * 16) + 15)];	// L121, [0,2)
        float v75 = v13 * v74;	// L122, [2,6)
        float v76 = v5[(v11 * 2)][((v12 * 16) + 15)];	// L123, [4,6)
        float v77 = v75 + v76;	// L124, [6,11)
        v5[(v11 * 2)][((v12 * 16) + 15)] = v77;	// L125, [11,12)
        float v78 = v1[((v11 * 2) + 1)][v10];	// L126, [0,2)
        float v79 = v78 * v14;	// L127, [2,6)
        float v80 = v5[((v11 * 2) + 1)][(v12 * 16)];	// L128, [4,6)
        float v81 = v79 + v80;	// L129, [6,11)
        v5[((v11 * 2) + 1)][(v12 * 16)] = v81;	// L130, [11,12)
        float v82 = v78 * v18;	// L131, [2,6)
        float v83 = v5[((v11 * 2) + 1)][((v12 * 16) + 1)];	// L132, [4,6)
        float v84 = v82 + v83;	// L133, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 1)] = v84;	// L134, [11,12)
        float v85 = v78 * v22;	// L135, [2,6)
        float v86 = v5[((v11 * 2) + 1)][((v12 * 16) + 2)];	// L136, [4,6)
        float v87 = v85 + v86;	// L137, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 2)] = v87;	// L138, [11,12)
        float v88 = v78 * v26;	// L139, [2,6)
        float v89 = v5[((v11 * 2) + 1)][((v12 * 16) + 3)];	// L140, [4,6)
        float v90 = v88 + v89;	// L141, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 3)] = v90;	// L142, [11,12)
        float v91 = v78 * v30;	// L143, [2,6)
        float v92 = v5[((v11 * 2) + 1)][((v12 * 16) + 4)];	// L144, [4,6)
        float v93 = v91 + v92;	// L145, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 4)] = v93;	// L146, [11,12)
        float v94 = v78 * v34;	// L147, [2,6)
        float v95 = v5[((v11 * 2) + 1)][((v12 * 16) + 5)];	// L148, [4,6)
        float v96 = v94 + v95;	// L149, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 5)] = v96;	// L150, [11,12)
        float v97 = v78 * v38;	// L151, [2,6)
        float v98 = v5[((v11 * 2) + 1)][((v12 * 16) + 6)];	// L152, [4,6)
        float v99 = v97 + v98;	// L153, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 6)] = v99;	// L154, [11,12)
        float v100 = v78 * v42;	// L155, [2,6)
        float v101 = v5[((v11 * 2) + 1)][((v12 * 16) + 7)];	// L156, [4,6)
        float v102 = v100 + v101;	// L157, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 7)] = v102;	// L158, [11,12)
        float v103 = v78 * v46;	// L159, [2,6)
        float v104 = v5[((v11 * 2) + 1)][((v12 * 16) + 8)];	// L160, [4,6)
        float v105 = v103 + v104;	// L161, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 8)] = v105;	// L162, [11,12)
        float v106 = v78 * v50;	// L163, [2,6)
        float v107 = v5[((v11 * 2) + 1)][((v12 * 16) + 9)];	// L164, [4,6)
        float v108 = v106 + v107;	// L165, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 9)] = v108;	// L166, [11,12)
        float v109 = v78 * v54;	// L167, [2,6)
        float v110 = v5[((v11 * 2) + 1)][((v12 * 16) + 10)];	// L168, [4,6)
        float v111 = v109 + v110;	// L169, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 10)] = v111;	// L170, [11,12)
        float v112 = v78 * v58;	// L171, [2,6)
        float v113 = v5[((v11 * 2) + 1)][((v12 * 16) + 11)];	// L172, [4,6)
        float v114 = v112 + v113;	// L173, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 11)] = v114;	// L174, [11,12)
        float v115 = v78 * v62;	// L175, [2,6)
        float v116 = v5[((v11 * 2) + 1)][((v12 * 16) + 12)];	// L176, [4,6)
        float v117 = v115 + v116;	// L177, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 12)] = v117;	// L178, [11,12)
        float v118 = v78 * v66;	// L179, [2,6)
        float v119 = v5[((v11 * 2) + 1)][((v12 * 16) + 13)];	// L180, [4,6)
        float v120 = v118 + v119;	// L181, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 13)] = v120;	// L182, [11,12)
        float v121 = v78 * v70;	// L183, [2,6)
        float v122 = v5[((v11 * 2) + 1)][((v12 * 16) + 14)];	// L184, [4,6)
        float v123 = v121 + v122;	// L185, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 14)] = v123;	// L186, [11,12)
        float v124 = v78 * v74;	// L187, [2,6)
        float v125 = v5[((v11 * 2) + 1)][((v12 * 16) + 15)];	// L188, [4,6)
        float v126 = v124 + v125;	// L189, [6,11)
        v5[((v11 * 2) + 1)][((v12 * 16) + 15)] = v126;	// L190, [11,12)
      }
    }
  }
  for (int v127 = 0; v127 < 32; v127 += 1) {	// L194, [1071,2097), iterCycle=1, II=1
    for (int v128 = 0; v128 < 32; v128 += 1) {	// L195, [3100,3134), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v6[v127][v128] = v0;	// L196, [0,1)
    }
  }
  for (int v129 = 0; v129 < 32; v129 += 1) {	// L199, [2097,3134), iterCycle=12, II=1
    for (int v130 = 0; v130 < 16; v130 += 1) {	// L200, [2063,2108), iterCycle=12, II=1
      for (int v131 = 0; v131 < 2; v131 += 1) {	// L201, [2063,2078), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v132 = v3[(v130 * 2)][v129];	// L202, [0,2)
        float v133 = v4[v129][(v131 * 16)];	// L203, [0,2)
        float v134 = v132 * v133;	// L204, [2,6)
        float v135 = v6[(v130 * 2)][(v131 * 16)];	// L205, [4,6)
        float v136 = v134 + v135;	// L206, [6,11)
        v6[(v130 * 2)][(v131 * 16)] = v136;	// L207, [11,12)
        float v137 = v4[v129][((v131 * 16) + 1)];	// L208, [0,2)
        float v138 = v132 * v137;	// L209, [2,6)
        float v139 = v6[(v130 * 2)][((v131 * 16) + 1)];	// L210, [4,6)
        float v140 = v138 + v139;	// L211, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 1)] = v140;	// L212, [11,12)
        float v141 = v4[v129][((v131 * 16) + 2)];	// L213, [0,2)
        float v142 = v132 * v141;	// L214, [2,6)
        float v143 = v6[(v130 * 2)][((v131 * 16) + 2)];	// L215, [4,6)
        float v144 = v142 + v143;	// L216, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 2)] = v144;	// L217, [11,12)
        float v145 = v4[v129][((v131 * 16) + 3)];	// L218, [0,2)
        float v146 = v132 * v145;	// L219, [2,6)
        float v147 = v6[(v130 * 2)][((v131 * 16) + 3)];	// L220, [4,6)
        float v148 = v146 + v147;	// L221, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 3)] = v148;	// L222, [11,12)
        float v149 = v4[v129][((v131 * 16) + 4)];	// L223, [0,2)
        float v150 = v132 * v149;	// L224, [2,6)
        float v151 = v6[(v130 * 2)][((v131 * 16) + 4)];	// L225, [4,6)
        float v152 = v150 + v151;	// L226, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 4)] = v152;	// L227, [11,12)
        float v153 = v4[v129][((v131 * 16) + 5)];	// L228, [0,2)
        float v154 = v132 * v153;	// L229, [2,6)
        float v155 = v6[(v130 * 2)][((v131 * 16) + 5)];	// L230, [4,6)
        float v156 = v154 + v155;	// L231, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 5)] = v156;	// L232, [11,12)
        float v157 = v4[v129][((v131 * 16) + 6)];	// L233, [0,2)
        float v158 = v132 * v157;	// L234, [2,6)
        float v159 = v6[(v130 * 2)][((v131 * 16) + 6)];	// L235, [4,6)
        float v160 = v158 + v159;	// L236, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 6)] = v160;	// L237, [11,12)
        float v161 = v4[v129][((v131 * 16) + 7)];	// L238, [0,2)
        float v162 = v132 * v161;	// L239, [2,6)
        float v163 = v6[(v130 * 2)][((v131 * 16) + 7)];	// L240, [4,6)
        float v164 = v162 + v163;	// L241, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 7)] = v164;	// L242, [11,12)
        float v165 = v4[v129][((v131 * 16) + 8)];	// L243, [0,2)
        float v166 = v132 * v165;	// L244, [2,6)
        float v167 = v6[(v130 * 2)][((v131 * 16) + 8)];	// L245, [4,6)
        float v168 = v166 + v167;	// L246, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 8)] = v168;	// L247, [11,12)
        float v169 = v4[v129][((v131 * 16) + 9)];	// L248, [0,2)
        float v170 = v132 * v169;	// L249, [2,6)
        float v171 = v6[(v130 * 2)][((v131 * 16) + 9)];	// L250, [4,6)
        float v172 = v170 + v171;	// L251, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 9)] = v172;	// L252, [11,12)
        float v173 = v4[v129][((v131 * 16) + 10)];	// L253, [0,2)
        float v174 = v132 * v173;	// L254, [2,6)
        float v175 = v6[(v130 * 2)][((v131 * 16) + 10)];	// L255, [4,6)
        float v176 = v174 + v175;	// L256, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 10)] = v176;	// L257, [11,12)
        float v177 = v4[v129][((v131 * 16) + 11)];	// L258, [0,2)
        float v178 = v132 * v177;	// L259, [2,6)
        float v179 = v6[(v130 * 2)][((v131 * 16) + 11)];	// L260, [4,6)
        float v180 = v178 + v179;	// L261, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 11)] = v180;	// L262, [11,12)
        float v181 = v4[v129][((v131 * 16) + 12)];	// L263, [0,2)
        float v182 = v132 * v181;	// L264, [2,6)
        float v183 = v6[(v130 * 2)][((v131 * 16) + 12)];	// L265, [4,6)
        float v184 = v182 + v183;	// L266, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 12)] = v184;	// L267, [11,12)
        float v185 = v4[v129][((v131 * 16) + 13)];	// L268, [0,2)
        float v186 = v132 * v185;	// L269, [2,6)
        float v187 = v6[(v130 * 2)][((v131 * 16) + 13)];	// L270, [4,6)
        float v188 = v186 + v187;	// L271, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 13)] = v188;	// L272, [11,12)
        float v189 = v4[v129][((v131 * 16) + 14)];	// L273, [0,2)
        float v190 = v132 * v189;	// L274, [2,6)
        float v191 = v6[(v130 * 2)][((v131 * 16) + 14)];	// L275, [4,6)
        float v192 = v190 + v191;	// L276, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 14)] = v192;	// L277, [11,12)
        float v193 = v4[v129][((v131 * 16) + 15)];	// L278, [0,2)
        float v194 = v132 * v193;	// L279, [2,6)
        float v195 = v6[(v130 * 2)][((v131 * 16) + 15)];	// L280, [4,6)
        float v196 = v194 + v195;	// L281, [6,11)
        v6[(v130 * 2)][((v131 * 16) + 15)] = v196;	// L282, [11,12)
        float v197 = v3[((v130 * 2) + 1)][v129];	// L283, [0,2)
        float v198 = v197 * v133;	// L284, [2,6)
        float v199 = v6[((v130 * 2) + 1)][(v131 * 16)];	// L285, [4,6)
        float v200 = v198 + v199;	// L286, [6,11)
        v6[((v130 * 2) + 1)][(v131 * 16)] = v200;	// L287, [11,12)
        float v201 = v197 * v137;	// L288, [2,6)
        float v202 = v6[((v130 * 2) + 1)][((v131 * 16) + 1)];	// L289, [4,6)
        float v203 = v201 + v202;	// L290, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 1)] = v203;	// L291, [11,12)
        float v204 = v197 * v141;	// L292, [2,6)
        float v205 = v6[((v130 * 2) + 1)][((v131 * 16) + 2)];	// L293, [4,6)
        float v206 = v204 + v205;	// L294, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 2)] = v206;	// L295, [11,12)
        float v207 = v197 * v145;	// L296, [2,6)
        float v208 = v6[((v130 * 2) + 1)][((v131 * 16) + 3)];	// L297, [4,6)
        float v209 = v207 + v208;	// L298, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 3)] = v209;	// L299, [11,12)
        float v210 = v197 * v149;	// L300, [2,6)
        float v211 = v6[((v130 * 2) + 1)][((v131 * 16) + 4)];	// L301, [4,6)
        float v212 = v210 + v211;	// L302, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 4)] = v212;	// L303, [11,12)
        float v213 = v197 * v153;	// L304, [2,6)
        float v214 = v6[((v130 * 2) + 1)][((v131 * 16) + 5)];	// L305, [4,6)
        float v215 = v213 + v214;	// L306, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 5)] = v215;	// L307, [11,12)
        float v216 = v197 * v157;	// L308, [2,6)
        float v217 = v6[((v130 * 2) + 1)][((v131 * 16) + 6)];	// L309, [4,6)
        float v218 = v216 + v217;	// L310, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 6)] = v218;	// L311, [11,12)
        float v219 = v197 * v161;	// L312, [2,6)
        float v220 = v6[((v130 * 2) + 1)][((v131 * 16) + 7)];	// L313, [4,6)
        float v221 = v219 + v220;	// L314, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 7)] = v221;	// L315, [11,12)
        float v222 = v197 * v165;	// L316, [2,6)
        float v223 = v6[((v130 * 2) + 1)][((v131 * 16) + 8)];	// L317, [4,6)
        float v224 = v222 + v223;	// L318, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 8)] = v224;	// L319, [11,12)
        float v225 = v197 * v169;	// L320, [2,6)
        float v226 = v6[((v130 * 2) + 1)][((v131 * 16) + 9)];	// L321, [4,6)
        float v227 = v225 + v226;	// L322, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 9)] = v227;	// L323, [11,12)
        float v228 = v197 * v173;	// L324, [2,6)
        float v229 = v6[((v130 * 2) + 1)][((v131 * 16) + 10)];	// L325, [4,6)
        float v230 = v228 + v229;	// L326, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 10)] = v230;	// L327, [11,12)
        float v231 = v197 * v177;	// L328, [2,6)
        float v232 = v6[((v130 * 2) + 1)][((v131 * 16) + 11)];	// L329, [4,6)
        float v233 = v231 + v232;	// L330, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 11)] = v233;	// L331, [11,12)
        float v234 = v197 * v181;	// L332, [2,6)
        float v235 = v6[((v130 * 2) + 1)][((v131 * 16) + 12)];	// L333, [4,6)
        float v236 = v234 + v235;	// L334, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 12)] = v236;	// L335, [11,12)
        float v237 = v197 * v185;	// L336, [2,6)
        float v238 = v6[((v130 * 2) + 1)][((v131 * 16) + 13)];	// L337, [4,6)
        float v239 = v237 + v238;	// L338, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 13)] = v239;	// L339, [11,12)
        float v240 = v197 * v189;	// L340, [2,6)
        float v241 = v6[((v130 * 2) + 1)][((v131 * 16) + 14)];	// L341, [4,6)
        float v242 = v240 + v241;	// L342, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 14)] = v242;	// L343, [11,12)
        float v243 = v197 * v193;	// L344, [2,6)
        float v244 = v6[((v130 * 2) + 1)][((v131 * 16) + 15)];	// L345, [4,6)
        float v245 = v243 + v244;	// L346, [6,11)
        v6[((v130 * 2) + 1)][((v131 * 16) + 15)] = v245;	// L347, [11,12)
      }
    }
  }
  for (int v246 = 0; v246 < 32; v246 += 1) {	// L351, [3134,4160), iterCycle=1, II=1
    for (int v247 = 0; v247 < 32; v247 += 1) {	// L352, [1037,1071), iterCycle=1, II=1
      #pragma HLS pipeline II=1
      v7[v246][v247] = v0;	// L353, [0,1)
    }
  }
  for (int v248 = 0; v248 < 32; v248 += 1) {	// L356, [4160,5197), iterCycle=12, II=1
    for (int v249 = 0; v249 < 16; v249 += 1) {	// L357, [0,45), iterCycle=12, II=1
      for (int v250 = 0; v250 < 2; v250 += 1) {	// L358, [0,15), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v251 = v5[(v249 * 2)][v248];	// L359, [0,2)
        float v252 = v6[v248][(v250 * 16)];	// L360, [0,2)
        float v253 = v251 * v252;	// L361, [2,6)
        float v254 = v7[(v249 * 2)][(v250 * 16)];	// L362, [4,6)
        float v255 = v253 + v254;	// L363, [6,11)
        v7[(v249 * 2)][(v250 * 16)] = v255;	// L364, [11,12)
        float v256 = v6[v248][((v250 * 16) + 1)];	// L365, [0,2)
        float v257 = v251 * v256;	// L366, [2,6)
        float v258 = v7[(v249 * 2)][((v250 * 16) + 1)];	// L367, [4,6)
        float v259 = v257 + v258;	// L368, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 1)] = v259;	// L369, [11,12)
        float v260 = v6[v248][((v250 * 16) + 2)];	// L370, [0,2)
        float v261 = v251 * v260;	// L371, [2,6)
        float v262 = v7[(v249 * 2)][((v250 * 16) + 2)];	// L372, [4,6)
        float v263 = v261 + v262;	// L373, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 2)] = v263;	// L374, [11,12)
        float v264 = v6[v248][((v250 * 16) + 3)];	// L375, [0,2)
        float v265 = v251 * v264;	// L376, [2,6)
        float v266 = v7[(v249 * 2)][((v250 * 16) + 3)];	// L377, [4,6)
        float v267 = v265 + v266;	// L378, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 3)] = v267;	// L379, [11,12)
        float v268 = v6[v248][((v250 * 16) + 4)];	// L380, [0,2)
        float v269 = v251 * v268;	// L381, [2,6)
        float v270 = v7[(v249 * 2)][((v250 * 16) + 4)];	// L382, [4,6)
        float v271 = v269 + v270;	// L383, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 4)] = v271;	// L384, [11,12)
        float v272 = v6[v248][((v250 * 16) + 5)];	// L385, [0,2)
        float v273 = v251 * v272;	// L386, [2,6)
        float v274 = v7[(v249 * 2)][((v250 * 16) + 5)];	// L387, [4,6)
        float v275 = v273 + v274;	// L388, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 5)] = v275;	// L389, [11,12)
        float v276 = v6[v248][((v250 * 16) + 6)];	// L390, [0,2)
        float v277 = v251 * v276;	// L391, [2,6)
        float v278 = v7[(v249 * 2)][((v250 * 16) + 6)];	// L392, [4,6)
        float v279 = v277 + v278;	// L393, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 6)] = v279;	// L394, [11,12)
        float v280 = v6[v248][((v250 * 16) + 7)];	// L395, [0,2)
        float v281 = v251 * v280;	// L396, [2,6)
        float v282 = v7[(v249 * 2)][((v250 * 16) + 7)];	// L397, [4,6)
        float v283 = v281 + v282;	// L398, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 7)] = v283;	// L399, [11,12)
        float v284 = v6[v248][((v250 * 16) + 8)];	// L400, [0,2)
        float v285 = v251 * v284;	// L401, [2,6)
        float v286 = v7[(v249 * 2)][((v250 * 16) + 8)];	// L402, [4,6)
        float v287 = v285 + v286;	// L403, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 8)] = v287;	// L404, [11,12)
        float v288 = v6[v248][((v250 * 16) + 9)];	// L405, [0,2)
        float v289 = v251 * v288;	// L406, [2,6)
        float v290 = v7[(v249 * 2)][((v250 * 16) + 9)];	// L407, [4,6)
        float v291 = v289 + v290;	// L408, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 9)] = v291;	// L409, [11,12)
        float v292 = v6[v248][((v250 * 16) + 10)];	// L410, [0,2)
        float v293 = v251 * v292;	// L411, [2,6)
        float v294 = v7[(v249 * 2)][((v250 * 16) + 10)];	// L412, [4,6)
        float v295 = v293 + v294;	// L413, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 10)] = v295;	// L414, [11,12)
        float v296 = v6[v248][((v250 * 16) + 11)];	// L415, [0,2)
        float v297 = v251 * v296;	// L416, [2,6)
        float v298 = v7[(v249 * 2)][((v250 * 16) + 11)];	// L417, [4,6)
        float v299 = v297 + v298;	// L418, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 11)] = v299;	// L419, [11,12)
        float v300 = v6[v248][((v250 * 16) + 12)];	// L420, [0,2)
        float v301 = v251 * v300;	// L421, [2,6)
        float v302 = v7[(v249 * 2)][((v250 * 16) + 12)];	// L422, [4,6)
        float v303 = v301 + v302;	// L423, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 12)] = v303;	// L424, [11,12)
        float v304 = v6[v248][((v250 * 16) + 13)];	// L425, [0,2)
        float v305 = v251 * v304;	// L426, [2,6)
        float v306 = v7[(v249 * 2)][((v250 * 16) + 13)];	// L427, [4,6)
        float v307 = v305 + v306;	// L428, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 13)] = v307;	// L429, [11,12)
        float v308 = v6[v248][((v250 * 16) + 14)];	// L430, [0,2)
        float v309 = v251 * v308;	// L431, [2,6)
        float v310 = v7[(v249 * 2)][((v250 * 16) + 14)];	// L432, [4,6)
        float v311 = v309 + v310;	// L433, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 14)] = v311;	// L434, [11,12)
        float v312 = v6[v248][((v250 * 16) + 15)];	// L435, [0,2)
        float v313 = v251 * v312;	// L436, [2,6)
        float v314 = v7[(v249 * 2)][((v250 * 16) + 15)];	// L437, [4,6)
        float v315 = v313 + v314;	// L438, [6,11)
        v7[(v249 * 2)][((v250 * 16) + 15)] = v315;	// L439, [11,12)
        float v316 = v5[((v249 * 2) + 1)][v248];	// L440, [0,2)
        float v317 = v316 * v252;	// L441, [2,6)
        float v318 = v7[((v249 * 2) + 1)][(v250 * 16)];	// L442, [4,6)
        float v319 = v317 + v318;	// L443, [6,11)
        v7[((v249 * 2) + 1)][(v250 * 16)] = v319;	// L444, [11,12)
        float v320 = v316 * v256;	// L445, [2,6)
        float v321 = v7[((v249 * 2) + 1)][((v250 * 16) + 1)];	// L446, [4,6)
        float v322 = v320 + v321;	// L447, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 1)] = v322;	// L448, [11,12)
        float v323 = v316 * v260;	// L449, [2,6)
        float v324 = v7[((v249 * 2) + 1)][((v250 * 16) + 2)];	// L450, [4,6)
        float v325 = v323 + v324;	// L451, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 2)] = v325;	// L452, [11,12)
        float v326 = v316 * v264;	// L453, [2,6)
        float v327 = v7[((v249 * 2) + 1)][((v250 * 16) + 3)];	// L454, [4,6)
        float v328 = v326 + v327;	// L455, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 3)] = v328;	// L456, [11,12)
        float v329 = v316 * v268;	// L457, [2,6)
        float v330 = v7[((v249 * 2) + 1)][((v250 * 16) + 4)];	// L458, [4,6)
        float v331 = v329 + v330;	// L459, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 4)] = v331;	// L460, [11,12)
        float v332 = v316 * v272;	// L461, [2,6)
        float v333 = v7[((v249 * 2) + 1)][((v250 * 16) + 5)];	// L462, [4,6)
        float v334 = v332 + v333;	// L463, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 5)] = v334;	// L464, [11,12)
        float v335 = v316 * v276;	// L465, [2,6)
        float v336 = v7[((v249 * 2) + 1)][((v250 * 16) + 6)];	// L466, [4,6)
        float v337 = v335 + v336;	// L467, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 6)] = v337;	// L468, [11,12)
        float v338 = v316 * v280;	// L469, [2,6)
        float v339 = v7[((v249 * 2) + 1)][((v250 * 16) + 7)];	// L470, [4,6)
        float v340 = v338 + v339;	// L471, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 7)] = v340;	// L472, [11,12)
        float v341 = v316 * v284;	// L473, [2,6)
        float v342 = v7[((v249 * 2) + 1)][((v250 * 16) + 8)];	// L474, [4,6)
        float v343 = v341 + v342;	// L475, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 8)] = v343;	// L476, [11,12)
        float v344 = v316 * v288;	// L477, [2,6)
        float v345 = v7[((v249 * 2) + 1)][((v250 * 16) + 9)];	// L478, [4,6)
        float v346 = v344 + v345;	// L479, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 9)] = v346;	// L480, [11,12)
        float v347 = v316 * v292;	// L481, [2,6)
        float v348 = v7[((v249 * 2) + 1)][((v250 * 16) + 10)];	// L482, [4,6)
        float v349 = v347 + v348;	// L483, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 10)] = v349;	// L484, [11,12)
        float v350 = v316 * v296;	// L485, [2,6)
        float v351 = v7[((v249 * 2) + 1)][((v250 * 16) + 11)];	// L486, [4,6)
        float v352 = v350 + v351;	// L487, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 11)] = v352;	// L488, [11,12)
        float v353 = v316 * v300;	// L489, [2,6)
        float v354 = v7[((v249 * 2) + 1)][((v250 * 16) + 12)];	// L490, [4,6)
        float v355 = v353 + v354;	// L491, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 12)] = v355;	// L492, [11,12)
        float v356 = v316 * v304;	// L493, [2,6)
        float v357 = v7[((v249 * 2) + 1)][((v250 * 16) + 13)];	// L494, [4,6)
        float v358 = v356 + v357;	// L495, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 13)] = v358;	// L496, [11,12)
        float v359 = v316 * v308;	// L497, [2,6)
        float v360 = v7[((v249 * 2) + 1)][((v250 * 16) + 14)];	// L498, [4,6)
        float v361 = v359 + v360;	// L499, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 14)] = v361;	// L500, [11,12)
        float v362 = v316 * v312;	// L501, [2,6)
        float v363 = v7[((v249 * 2) + 1)][((v250 * 16) + 15)];	// L502, [4,6)
        float v364 = v362 + v363;	// L503, [6,11)
        v7[((v249 * 2) + 1)][((v250 * 16) + 15)] = v364;	// L504, [11,12)
      }
    }
  }
}

