
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=75939899, interval=75939899
/// DSP=40, BRAM=0
void resnet(
  float v0,
  float v1[2][64][32][32],
  float v2[2][64][32][32],
  float v3[64][3][3][3],
  float v4[64][64][3][3],
  float v5[2][3][34][34],
  float v6[2][64][32][32]
) {	// L7, [0,75939899)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6

  #pragma HLS array_partition variable=v1 cyclic factor=8 dim=2
  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=3
  #pragma HLS array_partition variable=v1 cyclic factor=16 dim=4
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=2 dim=3
  #pragma HLS array_partition variable=v2 cyclic factor=16 dim=4
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=8 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=2 dim=4
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS resource variable=v6 core=ram_s2p_bram

  for (int v7 = 0; v7 < 3; v7 += 1) {	// L8, [0,442381), iterCycle=13, II=2
    for (int v8 = 0; v8 < 3; v8 += 1) {	// L9, [75497516,75644985), iterCycle=13, II=2
      for (int v9 = 0; v9 < 3; v9 += 1) {	// L10, [75497516,75546681), iterCycle=13, II=2
        for (int v10 = 0; v10 < 2; v10 += 1) {	// L11, [75497516,75513913), iterCycle=13, II=2
          for (int v11 = 0; v11 < 8; v11 += 1) {	// L12, [75497516,75505721), iterCycle=13, II=2
            for (int v12 = 0; v12 < 32; v12 += 1) {	// L13, [75497516,75498553), iterCycle=13, II=2
              for (int v13 = 0; v13 < 16; v13 += 1) {	// L14, [75497516,75497561), iterCycle=13, II=2
                #pragma HLS pipeline II=1
                float v14 = v3[(v11 * 8)][v7][v8][v9];	// L15, [0,2)
                float v15 = v5[v10][v7][(v12 + v8)][((v13 * 2) + v9)];	// L16, [0,2)
                float v16 = v14 * v15;	// L17, [2,6)
                float v17 = v1[v10][(v11 * 8)][v12][(v13 * 2)];	// L18, [4,6)
                float v18 = v16 + v17;	// L19, [6,11)
                v1[v10][(v11 * 8)][v12][(v13 * 2)] = v18;	// L20, [11,12)
                float v19 = v5[v10][v7][(v12 + v8)][(((v13 * 2) + v9) + 1)];	// L21, [1,3)
                float v20 = v14 * v19;	// L22, [3,7)
                float v21 = v1[v10][(v11 * 8)][v12][((v13 * 2) + 1)];	// L23, [5,7)
                float v22 = v20 + v21;	// L24, [7,12)
                v1[v10][(v11 * 8)][v12][((v13 * 2) + 1)] = v22;	// L25, [12,13)
                float v23 = v3[((v11 * 8) + 1)][v7][v8][v9];	// L26, [0,2)
                float v24 = v23 * v15;	// L27, [2,6)
                float v25 = v1[v10][((v11 * 8) + 1)][v12][(v13 * 2)];	// L28, [4,6)
                float v26 = v24 + v25;	// L29, [6,11)
                v1[v10][((v11 * 8) + 1)][v12][(v13 * 2)] = v26;	// L30, [11,12)
                float v27 = v23 * v19;	// L31, [3,7)
                float v28 = v1[v10][((v11 * 8) + 1)][v12][((v13 * 2) + 1)];	// L32, [5,7)
                float v29 = v27 + v28;	// L33, [7,12)
                v1[v10][((v11 * 8) + 1)][v12][((v13 * 2) + 1)] = v29;	// L34, [12,13)
                float v30 = v3[((v11 * 8) + 2)][v7][v8][v9];	// L35, [0,2)
                float v31 = v30 * v15;	// L36, [2,6)
                float v32 = v1[v10][((v11 * 8) + 2)][v12][(v13 * 2)];	// L37, [4,6)
                float v33 = v31 + v32;	// L38, [6,11)
                v1[v10][((v11 * 8) + 2)][v12][(v13 * 2)] = v33;	// L39, [11,12)
                float v34 = v30 * v19;	// L40, [3,7)
                float v35 = v1[v10][((v11 * 8) + 2)][v12][((v13 * 2) + 1)];	// L41, [5,7)
                float v36 = v34 + v35;	// L42, [7,12)
                v1[v10][((v11 * 8) + 2)][v12][((v13 * 2) + 1)] = v36;	// L43, [12,13)
                float v37 = v3[((v11 * 8) + 3)][v7][v8][v9];	// L44, [0,2)
                float v38 = v37 * v15;	// L45, [2,6)
                float v39 = v1[v10][((v11 * 8) + 3)][v12][(v13 * 2)];	// L46, [4,6)
                float v40 = v38 + v39;	// L47, [6,11)
                v1[v10][((v11 * 8) + 3)][v12][(v13 * 2)] = v40;	// L48, [11,12)
                float v41 = v37 * v19;	// L49, [3,7)
                float v42 = v1[v10][((v11 * 8) + 3)][v12][((v13 * 2) + 1)];	// L50, [5,7)
                float v43 = v41 + v42;	// L51, [7,12)
                v1[v10][((v11 * 8) + 3)][v12][((v13 * 2) + 1)] = v43;	// L52, [12,13)
                float v44 = v3[((v11 * 8) + 4)][v7][v8][v9];	// L53, [0,2)
                float v45 = v44 * v15;	// L54, [2,6)
                float v46 = v1[v10][((v11 * 8) + 4)][v12][(v13 * 2)];	// L55, [4,6)
                float v47 = v45 + v46;	// L56, [6,11)
                v1[v10][((v11 * 8) + 4)][v12][(v13 * 2)] = v47;	// L57, [11,12)
                float v48 = v44 * v19;	// L58, [3,7)
                float v49 = v1[v10][((v11 * 8) + 4)][v12][((v13 * 2) + 1)];	// L59, [5,7)
                float v50 = v48 + v49;	// L60, [7,12)
                v1[v10][((v11 * 8) + 4)][v12][((v13 * 2) + 1)] = v50;	// L61, [12,13)
                float v51 = v3[((v11 * 8) + 5)][v7][v8][v9];	// L62, [0,2)
                float v52 = v51 * v15;	// L63, [2,6)
                float v53 = v1[v10][((v11 * 8) + 5)][v12][(v13 * 2)];	// L64, [4,6)
                float v54 = v52 + v53;	// L65, [6,11)
                v1[v10][((v11 * 8) + 5)][v12][(v13 * 2)] = v54;	// L66, [11,12)
                float v55 = v51 * v19;	// L67, [3,7)
                float v56 = v1[v10][((v11 * 8) + 5)][v12][((v13 * 2) + 1)];	// L68, [5,7)
                float v57 = v55 + v56;	// L69, [7,12)
                v1[v10][((v11 * 8) + 5)][v12][((v13 * 2) + 1)] = v57;	// L70, [12,13)
                float v58 = v3[((v11 * 8) + 6)][v7][v8][v9];	// L71, [0,2)
                float v59 = v58 * v15;	// L72, [2,6)
                float v60 = v1[v10][((v11 * 8) + 6)][v12][(v13 * 2)];	// L73, [4,6)
                float v61 = v59 + v60;	// L74, [6,11)
                v1[v10][((v11 * 8) + 6)][v12][(v13 * 2)] = v61;	// L75, [11,12)
                float v62 = v58 * v19;	// L76, [3,7)
                float v63 = v1[v10][((v11 * 8) + 6)][v12][((v13 * 2) + 1)];	// L77, [5,7)
                float v64 = v62 + v63;	// L78, [7,12)
                v1[v10][((v11 * 8) + 6)][v12][((v13 * 2) + 1)] = v64;	// L79, [12,13)
                float v65 = v3[((v11 * 8) + 7)][v7][v8][v9];	// L80, [0,2)
                float v66 = v65 * v15;	// L81, [2,6)
                float v67 = v1[v10][((v11 * 8) + 7)][v12][(v13 * 2)];	// L82, [4,6)
                float v68 = v66 + v67;	// L83, [6,11)
                v1[v10][((v11 * 8) + 7)][v12][(v13 * 2)] = v68;	// L84, [11,12)
                float v69 = v65 * v19;	// L85, [3,7)
                float v70 = v1[v10][((v11 * 8) + 7)][v12][((v13 * 2) + 1)];	// L86, [5,7)
                float v71 = v69 + v70;	// L87, [7,12)
                v1[v10][((v11 * 8) + 7)][v12][((v13 * 2) + 1)] = v71;	// L88, [12,13)
              }
            }
          }
        }
      }
    }
  }
  for (int v72 = 0; v72 < 64; v72 += 1) {	// L96, [442381,75939897), iterCycle=74, II=32
    for (int v73 = 0; v73 < 3; v73 += 1) {	// L97, [0,1179692), iterCycle=74, II=32
      for (int v74 = 0; v74 < 3; v74 += 1) {	// L98, [0,393260), iterCycle=74, II=32
        for (int v75 = 0; v75 < 2; v75 += 1) {	// L99, [0,131116), iterCycle=74, II=32
          for (int v76 = 0; v76 < 64; v76 += 1) {	// L100, [0,65580), iterCycle=74, II=32
            for (int v77 = 0; v77 < 16; v77 += 1) {	// L101, [0,1068), iterCycle=74, II=32
              for (int v78 = 0; v78 < 2; v78 += 1) {	// L102, [0,108), iterCycle=74, II=32
                #pragma HLS pipeline II=1
                float v79 = v4[v76][v72][v73][v74];	// L103, [62,64)
                float v80 = v1[v75][v72][((v77 * 2) + v73)][((v78 * 16) + v74)];	// L104, [0,2)
                float v81 = v79 * v80;	// L105, [64,68)
                float v82 = v2[v75][v76][(v77 * 2)][(v78 * 16)];	// L106, [66,68)
                float v83 = v81 + v82;	// L107, [68,73)
                v2[v75][v76][(v77 * 2)][(v78 * 16)] = v83;	// L108, [73,74)
                float v84 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 1)];	// L109, [2,4)
                float v85 = v79 * v84;	// L110, [64,68)
                float v86 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 1)];	// L111, [66,68)
                float v87 = v85 + v86;	// L112, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 1)] = v87;	// L113, [73,74)
                float v88 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 2)];	// L114, [4,6)
                float v89 = v79 * v88;	// L115, [64,68)
                float v90 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 2)];	// L116, [66,68)
                float v91 = v89 + v90;	// L117, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 2)] = v91;	// L118, [73,74)
                float v92 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 3)];	// L119, [6,8)
                float v93 = v79 * v92;	// L120, [64,68)
                float v94 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 3)];	// L121, [66,68)
                float v95 = v93 + v94;	// L122, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 3)] = v95;	// L123, [73,74)
                float v96 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 4)];	// L124, [8,10)
                float v97 = v79 * v96;	// L125, [64,68)
                float v98 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 4)];	// L126, [66,68)
                float v99 = v97 + v98;	// L127, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 4)] = v99;	// L128, [73,74)
                float v100 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 5)];	// L129, [10,12)
                float v101 = v79 * v100;	// L130, [64,68)
                float v102 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 5)];	// L131, [66,68)
                float v103 = v101 + v102;	// L132, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 5)] = v103;	// L133, [73,74)
                float v104 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 6)];	// L134, [12,14)
                float v105 = v79 * v104;	// L135, [64,68)
                float v106 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 6)];	// L136, [66,68)
                float v107 = v105 + v106;	// L137, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 6)] = v107;	// L138, [73,74)
                float v108 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 7)];	// L139, [14,16)
                float v109 = v79 * v108;	// L140, [64,68)
                float v110 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 7)];	// L141, [66,68)
                float v111 = v109 + v110;	// L142, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 7)] = v111;	// L143, [73,74)
                float v112 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 8)];	// L144, [16,18)
                float v113 = v79 * v112;	// L145, [64,68)
                float v114 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 8)];	// L146, [66,68)
                float v115 = v113 + v114;	// L147, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 8)] = v115;	// L148, [73,74)
                float v116 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 9)];	// L149, [18,20)
                float v117 = v79 * v116;	// L150, [64,68)
                float v118 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 9)];	// L151, [66,68)
                float v119 = v117 + v118;	// L152, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 9)] = v119;	// L153, [73,74)
                float v120 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 10)];	// L154, [20,22)
                float v121 = v79 * v120;	// L155, [64,68)
                float v122 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 10)];	// L156, [66,68)
                float v123 = v121 + v122;	// L157, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 10)] = v123;	// L158, [73,74)
                float v124 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 11)];	// L159, [22,24)
                float v125 = v79 * v124;	// L160, [64,68)
                float v126 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 11)];	// L161, [66,68)
                float v127 = v125 + v126;	// L162, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 11)] = v127;	// L163, [73,74)
                float v128 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 12)];	// L164, [24,26)
                float v129 = v79 * v128;	// L165, [64,68)
                float v130 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 12)];	// L166, [66,68)
                float v131 = v129 + v130;	// L167, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 12)] = v131;	// L168, [73,74)
                float v132 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 13)];	// L169, [26,28)
                float v133 = v79 * v132;	// L170, [64,68)
                float v134 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 13)];	// L171, [66,68)
                float v135 = v133 + v134;	// L172, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 13)] = v135;	// L173, [73,74)
                float v136 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 14)];	// L174, [28,30)
                float v137 = v79 * v136;	// L175, [64,68)
                float v138 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 14)];	// L176, [66,68)
                float v139 = v137 + v138;	// L177, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 14)] = v139;	// L178, [73,74)
                float v140 = v1[v75][v72][((v77 * 2) + v73)][(((v78 * 16) + v74) + 15)];	// L179, [30,32)
                float v141 = v79 * v140;	// L180, [64,68)
                float v142 = v2[v75][v76][(v77 * 2)][((v78 * 16) + 15)];	// L181, [66,68)
                float v143 = v141 + v142;	// L182, [68,73)
                v2[v75][v76][(v77 * 2)][((v78 * 16) + 15)] = v143;	// L183, [73,74)
                float v144 = v1[v75][v72][(((v77 * 2) + v73) + 1)][((v78 * 16) + v74)];	// L184, [32,34)
                float v145 = v79 * v144;	// L185, [64,68)
                float v146 = v2[v75][v76][((v77 * 2) + 1)][(v78 * 16)];	// L186, [66,68)
                float v147 = v145 + v146;	// L187, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][(v78 * 16)] = v147;	// L188, [73,74)
                float v148 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 1)];	// L189, [34,36)
                float v149 = v79 * v148;	// L190, [64,68)
                float v150 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 1)];	// L191, [66,68)
                float v151 = v149 + v150;	// L192, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 1)] = v151;	// L193, [73,74)
                float v152 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 2)];	// L194, [36,38)
                float v153 = v79 * v152;	// L195, [64,68)
                float v154 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 2)];	// L196, [66,68)
                float v155 = v153 + v154;	// L197, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 2)] = v155;	// L198, [73,74)
                float v156 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 3)];	// L199, [38,40)
                float v157 = v79 * v156;	// L200, [64,68)
                float v158 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 3)];	// L201, [66,68)
                float v159 = v157 + v158;	// L202, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 3)] = v159;	// L203, [73,74)
                float v160 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 4)];	// L204, [40,42)
                float v161 = v79 * v160;	// L205, [64,68)
                float v162 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 4)];	// L206, [66,68)
                float v163 = v161 + v162;	// L207, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 4)] = v163;	// L208, [73,74)
                float v164 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 5)];	// L209, [42,44)
                float v165 = v79 * v164;	// L210, [64,68)
                float v166 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 5)];	// L211, [66,68)
                float v167 = v165 + v166;	// L212, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 5)] = v167;	// L213, [73,74)
                float v168 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 6)];	// L214, [44,46)
                float v169 = v79 * v168;	// L215, [64,68)
                float v170 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 6)];	// L216, [66,68)
                float v171 = v169 + v170;	// L217, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 6)] = v171;	// L218, [73,74)
                float v172 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 7)];	// L219, [46,48)
                float v173 = v79 * v172;	// L220, [64,68)
                float v174 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 7)];	// L221, [66,68)
                float v175 = v173 + v174;	// L222, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 7)] = v175;	// L223, [73,74)
                float v176 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 8)];	// L224, [48,50)
                float v177 = v79 * v176;	// L225, [64,68)
                float v178 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 8)];	// L226, [66,68)
                float v179 = v177 + v178;	// L227, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 8)] = v179;	// L228, [73,74)
                float v180 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 9)];	// L229, [50,52)
                float v181 = v79 * v180;	// L230, [64,68)
                float v182 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 9)];	// L231, [66,68)
                float v183 = v181 + v182;	// L232, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 9)] = v183;	// L233, [73,74)
                float v184 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 10)];	// L234, [52,54)
                float v185 = v79 * v184;	// L235, [64,68)
                float v186 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 10)];	// L236, [66,68)
                float v187 = v185 + v186;	// L237, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 10)] = v187;	// L238, [73,74)
                float v188 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 11)];	// L239, [54,56)
                float v189 = v79 * v188;	// L240, [64,68)
                float v190 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 11)];	// L241, [66,68)
                float v191 = v189 + v190;	// L242, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 11)] = v191;	// L243, [73,74)
                float v192 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 12)];	// L244, [56,58)
                float v193 = v79 * v192;	// L245, [64,68)
                float v194 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 12)];	// L246, [66,68)
                float v195 = v193 + v194;	// L247, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 12)] = v195;	// L248, [73,74)
                float v196 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 13)];	// L249, [58,60)
                float v197 = v79 * v196;	// L250, [64,68)
                float v198 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 13)];	// L251, [66,68)
                float v199 = v197 + v198;	// L252, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 13)] = v199;	// L253, [73,74)
                float v200 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 14)];	// L254, [60,62)
                float v201 = v79 * v200;	// L255, [64,68)
                float v202 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 14)];	// L256, [66,68)
                float v203 = v201 + v202;	// L257, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 14)] = v203;	// L258, [73,74)
                float v204 = v1[v75][v72][(((v77 * 2) + v73) + 1)][(((v78 * 16) + v74) + 15)];	// L259, [62,64)
                float v205 = v79 * v204;	// L260, [64,68)
                float v206 = v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 15)];	// L261, [66,68)
                float v207 = v205 + v206;	// L262, [68,73)
                v2[v75][v76][((v77 * 2) + 1)][((v78 * 16) + 15)] = v207;	// L263, [73,74)
              }
            }
          }
        }
      }
    }
  }
}

